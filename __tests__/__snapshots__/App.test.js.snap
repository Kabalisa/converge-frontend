// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App component should not render Login if token is present but render Settings component 1`] = `
<MockedProvider
  addTypename={true}
>
  <ApolloProvider
    client={
      ApolloClient {
        "__operations_cache__": Array [
          Array [
            "locations",
            Object {
              "query": Object {
                "definitions": Array [
                  Object {
                    "directives": Array [],
                    "kind": "OperationDefinition",
                    "name": Object {
                      "kind": "Name",
                      "value": "locations",
                    },
                    "operation": "query",
                    "selectionSet": Object {
                      "kind": "SelectionSet",
                      "selections": Array [
                        Object {
                          "alias": undefined,
                          "arguments": Array [],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "allLocations",
                          },
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "id",
                                },
                                "selectionSet": undefined,
                              },
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "name",
                                },
                                "selectionSet": undefined,
                              },
                            ],
                          },
                        },
                      ],
                    },
                    "variableDefinitions": Array [],
                  },
                ],
                "kind": "Document",
                "loc": Object {
                  "end": 57,
                  "start": 0,
                },
              },
              "variables": undefined,
            },
          ],
        ],
        "cache": InMemoryCache {
          "addTypename": true,
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "storeFactory": [Function],
          },
          "data": ObjectCache {
            "data": Object {},
          },
          "optimistic": Array [],
          "silenceBroadcast": false,
          "watches": Array [
            Object {
              "callback": [Function],
              "optimistic": true,
              "previousResult": [Function],
              "query": Object {
                "definitions": Array [
                  Object {
                    "directives": Array [],
                    "kind": "OperationDefinition",
                    "name": Object {
                      "kind": "Name",
                      "value": "locations",
                    },
                    "operation": "query",
                    "selectionSet": Object {
                      "kind": "SelectionSet",
                      "selections": Array [
                        Object {
                          "alias": undefined,
                          "arguments": Array [],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "allLocations",
                          },
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "id",
                                },
                                "selectionSet": undefined,
                              },
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "name",
                                },
                                "selectionSet": undefined,
                              },
                              Object {
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "__typename",
                                },
                              },
                            ],
                          },
                        },
                      ],
                    },
                    "variableDefinitions": Array [],
                  },
                ],
                "kind": "Document",
                "loc": Object {
                  "end": 57,
                  "source": Object {
                    "body": "
query locations {
  allLocations {
    id
    name
  }
}",
                    "locationOffset": Object {
                      "column": 1,
                      "line": 1,
                    },
                    "name": "GraphQL request",
                  },
                  "start": 0,
                },
              },
              "variables": undefined,
            },
          ],
        },
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": ApolloLink {
          "request": [Function],
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "queryManager": QueryManager {
          "dataStore": DataStore {
            "cache": InMemoryCache {
              "addTypename": true,
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "storeFactory": [Function],
              },
              "data": ObjectCache {
                "data": Object {},
              },
              "optimistic": Array [],
              "silenceBroadcast": false,
              "watches": Array [
                Object {
                  "callback": [Function],
                  "optimistic": true,
                  "previousResult": [Function],
                  "query": Object {
                    "definitions": Array [
                      Object {
                        "directives": Array [],
                        "kind": "OperationDefinition",
                        "name": Object {
                          "kind": "Name",
                          "value": "locations",
                        },
                        "operation": "query",
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "allLocations",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "id",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "name",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "__typename",
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                        "variableDefinitions": Array [],
                      },
                    ],
                    "kind": "Document",
                    "loc": Object {
                      "end": 57,
                      "source": Object {
                        "body": "
query locations {
  allLocations {
    id
    name
  }
}",
                        "locationOffset": Object {
                          "column": 1,
                          "line": 1,
                        },
                        "name": "GraphQL request",
                      },
                      "start": 0,
                    },
                  },
                  "variables": undefined,
                },
              ],
            },
          },
          "deduplicator": ApolloLink {
            "request": [Function],
          },
          "fetchQueryPromises": Array [
            Array [
              "2",
              Object {
                "reject": [Function],
                "resolve": [Function],
              },
            ],
          ],
          "idCounter": 3,
          "link": ApolloLink {
            "request": [Function],
          },
          "mutationStore": MutationStore {
            "store": Object {},
          },
          "onBroadcast": [Function],
          "queries": Array [
            Array [
              "1",
              Object {
                "cancel": [Function],
                "document": Object {
                  "definitions": Array [
                    Object {
                      "directives": Array [],
                      "kind": "OperationDefinition",
                      "name": Object {
                        "kind": "Name",
                        "value": "locations",
                      },
                      "operation": "query",
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "allLocations",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "id",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "name",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "__typename",
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                      "variableDefinitions": Array [],
                    },
                  ],
                  "kind": "Document",
                  "loc": Object {
                    "end": 57,
                    "source": Object {
                      "body": "
query locations {
  allLocations {
    id
    name
  }
}",
                      "locationOffset": Object {
                        "column": 1,
                        "line": 1,
                      },
                      "name": "GraphQL request",
                    },
                    "start": 0,
                  },
                },
                "invalidate": false,
                "invalidated": false,
                "lastRequestId": 2,
                "listeners": Array [
                  [Function],
                ],
                "newData": null,
                "observableQuery": ObservableQuery {
                  "_subscriber": [Function],
                  "isCurrentlyPolling": false,
                  "isTornDown": false,
                  "observers": Array [
                    SubscriptionObserver {
                      "_subscription": Subscription {
                        "_cleanup": [Function],
                        "_observer": Object {
                          "error": [Function],
                          "next": [Function],
                        },
                        "_queue": undefined,
                        "_state": "ready",
                      },
                    },
                  ],
                  "options": Object {
                    "context": Object {},
                    "metadata": Object {
                      "reactComponent": Object {
                        "displayName": "Apollo(Apollo(AddOffice))",
                      },
                    },
                    "notifyOnNetworkStatusChange": false,
                    "query": Object {
                      "definitions": Array [
                        Object {
                          "directives": Array [],
                          "kind": "OperationDefinition",
                          "name": Object {
                            "kind": "Name",
                            "value": "locations",
                          },
                          "operation": "query",
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "allLocations",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "id",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "name",
                                      },
                                      "selectionSet": undefined,
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          "variableDefinitions": Array [],
                        },
                      ],
                      "kind": "Document",
                      "loc": Object {
                        "end": 57,
                        "start": 0,
                      },
                    },
                  },
                  "queryId": "1",
                  "queryManager": [Circular],
                  "scheduler": QueryScheduler {
                    "inFlightQueries": Object {},
                    "intervalQueries": Object {},
                    "pollingTimers": Object {},
                    "queryManager": [Circular],
                    "registeredQueries": Object {},
                    "ssrMode": false,
                  },
                  "shouldSubscribe": true,
                  "subscriptionHandles": Array [],
                  "variables": Object {},
                },
                "subscriptions": Array [],
              },
            ],
          ],
          "queryDeduplication": true,
          "queryIdsByName": Object {
            "locations": Array [
              "1",
            ],
          },
          "queryStore": QueryStore {
            "store": Object {
              "1": Object {
                "document": Object {
                  "definitions": Array [
                    Object {
                      "directives": Array [],
                      "kind": "OperationDefinition",
                      "name": Object {
                        "kind": "Name",
                        "value": "locations",
                      },
                      "operation": "query",
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "allLocations",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "id",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "name",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "__typename",
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                      "variableDefinitions": Array [],
                    },
                  ],
                  "kind": "Document",
                  "loc": Object {
                    "end": 57,
                    "source": Object {
                      "body": "
query locations {
  allLocations {
    id
    name
  }
}",
                      "locationOffset": Object {
                        "column": 1,
                        "line": 1,
                      },
                      "name": "GraphQL request",
                    },
                    "start": 0,
                  },
                },
                "graphQLErrors": Array [],
                "metadata": Object {
                  "reactComponent": Object {
                    "displayName": "Apollo(Apollo(AddOffice))",
                  },
                },
                "networkError": null,
                "networkStatus": 1,
                "previousVariables": null,
                "variables": Object {},
              },
            },
          },
          "scheduler": QueryScheduler {
            "inFlightQueries": Object {},
            "intervalQueries": Object {},
            "pollingTimers": Object {},
            "queryManager": [Circular],
            "registeredQueries": Object {},
            "ssrMode": false,
          },
        },
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "ssrMode": false,
        "store": DataStore {
          "cache": InMemoryCache {
            "addTypename": true,
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "storeFactory": [Function],
            },
            "data": ObjectCache {
              "data": Object {},
            },
            "optimistic": Array [],
            "silenceBroadcast": false,
            "watches": Array [
              Object {
                "callback": [Function],
                "optimistic": true,
                "previousResult": [Function],
                "query": Object {
                  "definitions": Array [
                    Object {
                      "directives": Array [],
                      "kind": "OperationDefinition",
                      "name": Object {
                        "kind": "Name",
                        "value": "locations",
                      },
                      "operation": "query",
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "allLocations",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "id",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "name",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "__typename",
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                      "variableDefinitions": Array [],
                    },
                  ],
                  "kind": "Document",
                  "loc": Object {
                    "end": 57,
                    "source": Object {
                      "body": "
query locations {
  allLocations {
    id
    name
  }
}",
                      "locationOffset": Object {
                        "column": 1,
                        "line": 1,
                      },
                      "name": "GraphQL request",
                    },
                    "start": 0,
                  },
                },
                "variables": undefined,
              },
            ],
          },
        },
        "version": "2.3.1",
        "watchQuery": [Function],
      }
    }
  >
    <MemoryRouter
      initialEntries={
        Array [
          "/",
          "/settings",
        ]
      }
      initialIndex={1}
      keyLength={0}
    >
      <Router
        history={
          Object {
            "action": "REPLACE",
            "block": [Function],
            "canGo": [Function],
            "createHref": [Function],
            "entries": Array [
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              Object {
                "hash": "",
                "pathname": "/settings/offices",
                "search": "",
                "state": undefined,
              },
            ],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "index": 1,
            "length": 2,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/settings/offices",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <withRouter(App)>
          <Route
            render={[Function]}
          >
            <App
              history={
                Object {
                  "action": "REPLACE",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    Object {
                      "hash": "",
                      "pathname": "/settings/offices",
                      "search": "",
                      "state": undefined,
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 1,
                  "length": 2,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/settings/offices",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "pathname": "/settings/offices",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": false,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
            >
              <Switch>
                <Route
                  component={[Function]}
                  computedMatch={
                    Object {
                      "isExact": false,
                      "params": Object {},
                      "path": "/settings",
                      "url": "/settings",
                    }
                  }
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/settings/offices",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  path="/settings"
                >
                  <Settings
                    history={
                      Object {
                        "action": "REPLACE",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          Object {
                            "hash": "",
                            "pathname": "/settings/offices",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 1,
                        "length": 2,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/settings/offices",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/settings/offices",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": false,
                        "params": Object {},
                        "path": "/settings",
                        "url": "/settings",
                      }
                    }
                  >
                    <NavBar>
                      <TopMenu>
                        <div
                          className="top-menu"
                        >
                          <div
                            className="container size-2-8 nav-menu"
                          >
                            <div
                              className="container content-start nav-left"
                            >
                              <ul
                                className="inline nav-brand"
                              >
                                <li
                                  className="logo"
                                >
                                  <img
                                    alt="Logo"
                                    src="test-file-stub"
                                  />
                                </li>
                                <li
                                  className="logo-text"
                                >
                                  <h1>
                                    CONVERGE
                                  </h1>
                                </li>
                              </ul>
                            </div>
                            <div
                              className="container content-end nav-right"
                            >
                              <div
                                className="search-box"
                              >
                                <form
                                  className="container"
                                >
                                  <input
                                    className="search-bar"
                                    type="text"
                                  />
                                  <img
                                    alt="Search icon"
                                    className="search-icon"
                                    src="test-file-stub"
                                  />
                                </form>
                              </div>
                              <div
                                className="container side-nav"
                              >
                                <div
                                  className="notifications"
                                >
                                  <img
                                    alt="Notification icon"
                                    src="test-file-stub"
                                  />
                                </div>
                                <div
                                  className="profile"
                                >
                                  <img
                                    alt="Profile icon"
                                    style={
                                      Object {
                                        "borderRadius": "17px",
                                        "height": "34px",
                                        "width": "34px",
                                      }
                                    }
                                  />
                                </div>
                                <div
                                  className="profile-name"
                                >
                                  <span
                                    className="username"
                                  >
                                    undefined undefined
                                  </span>
                                  <ProfileMenu>
                                    <ThemedIconMenu
                                      className="material-icons profile-dropdown"
                                      composeTheme="deeply"
                                      icon="arrow_drop_down"
                                      iconRipple={true}
                                      mapThemrProps={[Function]}
                                      menuRipple={true}
                                      position="auto"
                                      selectable={false}
                                    >
                                      <IconMenu
                                        className="material-icons profile-dropdown"
                                        icon="arrow_drop_down"
                                        iconRipple={true}
                                        menuRipple={true}
                                        position="auto"
                                        selectable={false}
                                        theme={Object {}}
                                      >
                                        <div
                                          className="material-icons profile-dropdown"
                                        >
                                          <ThemedThemed
                                            composeTheme="deeply"
                                            disabled={false}
                                            icon="arrow_drop_down"
                                            mapThemrProps={[Function]}
                                            onClick={[Function]}
                                            ripple={true}
                                            rippleCentered={true}
                                            rippleClassName=""
                                            rippleMultiple={true}
                                            rippleSpread={2}
                                          >
                                            <ThemedRippledComponent
                                              composeTheme="deeply"
                                              disabled={false}
                                              icon="arrow_drop_down"
                                              mapThemrProps={[Function]}
                                              onClick={[Function]}
                                              ripple={true}
                                              rippleCentered={true}
                                              rippleClassName=""
                                              rippleMultiple={true}
                                              rippleSpread={2}
                                              theme={Object {}}
                                            >
                                              <RippledComponent
                                                disabled={false}
                                                icon="arrow_drop_down"
                                                onClick={[Function]}
                                                ripple={true}
                                                rippleCentered={true}
                                                rippleClassName=""
                                                rippleMultiple={true}
                                                rippleSpread={2}
                                                theme={Object {}}
                                              >
                                                <IconButton
                                                  accent={false}
                                                  className=""
                                                  disabled={false}
                                                  icon="arrow_drop_down"
                                                  neutral={true}
                                                  onClick={[Function]}
                                                  onMouseDown={[Function]}
                                                  onTouchStart={[Function]}
                                                  primary={false}
                                                  theme={Object {}}
                                                  type="button"
                                                >
                                                  <button
                                                    className=""
                                                    data-react-toolbox="button"
                                                    disabled={false}
                                                    onClick={[Function]}
                                                    onMouseDown={[Function]}
                                                    onMouseLeave={[Function]}
                                                    onMouseUp={[Function]}
                                                    onTouchStart={[Function]}
                                                    type="button"
                                                  >
                                                    <FontIcon
                                                      alt=""
                                                      className=""
                                                      value="arrow_drop_down"
                                                    >
                                                      <span
                                                        aria-label=""
                                                        className="material-icons"
                                                        data-react-toolbox="font-icon"
                                                      >
                                                        arrow_drop_down
                                                      </span>
                                                    </FontIcon>
                                                  </button>
                                                </IconButton>
                                              </RippledComponent>
                                            </ThemedRippledComponent>
                                          </ThemedThemed>
                                          <ThemedMenu
                                            active={false}
                                            composeTheme="deeply"
                                            mapThemrProps={[Function]}
                                            onHide={[Function]}
                                            outline={true}
                                            position="auto"
                                            ripple={true}
                                            selectable={false}
                                            theme={Object {}}
                                          >
                                            <Menu
                                              active={false}
                                              onHide={[Function]}
                                              outline={true}
                                              position="auto"
                                              ripple={true}
                                              selectable={false}
                                              theme={Object {}}
                                            >
                                              <div
                                                className=""
                                                data-react-toolbox="menu"
                                                style={
                                                  Object {
                                                    "height": undefined,
                                                    "width": undefined,
                                                  }
                                                }
                                              >
                                                <div
                                                  style={
                                                    Object {
                                                      "height": undefined,
                                                      "width": undefined,
                                                    }
                                                  }
                                                />
                                                <ul>
                                                  <ThemedThemed
                                                    caption="LOGOUT"
                                                    className="profile-menu"
                                                    composeTheme="deeply"
                                                    disabled={false}
                                                    key=".0"
                                                    mapThemrProps={[Function]}
                                                    onClick={[Function]}
                                                    ripple={true}
                                                    rippleCentered={false}
                                                    rippleClassName=""
                                                    rippleMultiple={true}
                                                    rippleSpread={2}
                                                    selected={false}
                                                  >
                                                    <ThemedRippledComponent
                                                      caption="LOGOUT"
                                                      className="profile-menu"
                                                      composeTheme="deeply"
                                                      disabled={false}
                                                      mapThemrProps={[Function]}
                                                      onClick={[Function]}
                                                      ripple={true}
                                                      rippleCentered={false}
                                                      rippleClassName=""
                                                      rippleMultiple={true}
                                                      rippleSpread={2}
                                                      selected={false}
                                                      theme={Object {}}
                                                    >
                                                      <RippledComponent
                                                        caption="LOGOUT"
                                                        className="profile-menu"
                                                        disabled={false}
                                                        onClick={[Function]}
                                                        ripple={true}
                                                        rippleCentered={false}
                                                        rippleClassName=""
                                                        rippleMultiple={true}
                                                        rippleSpread={2}
                                                        selected={false}
                                                        theme={Object {}}
                                                      >
                                                        <MenuItem
                                                          caption="LOGOUT"
                                                          className="profile-menu"
                                                          disabled={false}
                                                          onClick={[Function]}
                                                          onMouseDown={[Function]}
                                                          onTouchStart={[Function]}
                                                          selected={false}
                                                          theme={Object {}}
                                                        >
                                                          <li
                                                            className="profile-menu"
                                                            data-react-toolbox="menu-item"
                                                            onClick={[Function]}
                                                            onMouseDown={[Function]}
                                                            onTouchStart={[Function]}
                                                          >
                                                            <span>
                                                              LOGOUT
                                                            </span>
                                                          </li>
                                                        </MenuItem>
                                                      </RippledComponent>
                                                    </ThemedRippledComponent>
                                                  </ThemedThemed>
                                                </ul>
                                              </div>
                                            </Menu>
                                          </ThemedMenu>
                                        </div>
                                      </IconMenu>
                                    </ThemedIconMenu>
                                  </ProfileMenu>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </TopMenu>
                      <TopNav>
                        <div
                          className="top-nav"
                        >
                          <ThemedAppBar
                            className="nav-app-bar"
                            composeTheme="deeply"
                            fixed={false}
                            flat={false}
                            mapThemrProps={[Function]}
                            scrollHide={false}
                          >
                            <AppBar
                              className="nav-app-bar"
                              fixed={false}
                              flat={false}
                              scrollHide={false}
                              theme={Object {}}
                            >
                              <header
                                className="nav-app-bar"
                                data-react-toolbox="app-bar"
                              >
                                <div>
                                  <ThemedNavigation
                                    actions={Array []}
                                    className=""
                                    composeTheme="deeply"
                                    mapThemrProps={[Function]}
                                    routes={Array []}
                                    type="horizontal"
                                  >
                                    <Navigation
                                      actions={Array []}
                                      className=""
                                      routes={Array []}
                                      theme={Object {}}
                                      type="horizontal"
                                    >
                                      <nav
                                        className=""
                                        data-react-toolbox="navigation"
                                      >
                                        <NavLink
                                          exact={false}
                                          icon={
                                            <img
                                              alt="Analytics"
                                              src="test-file-stub"
                                            />
                                          }
                                          label="Analytics"
                                          strict={false}
                                          to="/analytics"
                                        >
                                          <Route
                                            exact={false}
                                            path="/analytics"
                                            strict={false}
                                          >
                                            <ThemedLink
                                              active={false}
                                              className=""
                                              composeTheme="deeply"
                                              icon={
                                                <img
                                                  alt="Analytics"
                                                  src="test-file-stub"
                                                />
                                              }
                                              label="Analytics"
                                              mapThemrProps={[Function]}
                                              onClick={[Function]}
                                            >
                                              <Link
                                                active={false}
                                                className=""
                                                icon={
                                                  <img
                                                    alt="Analytics"
                                                    src="test-file-stub"
                                                  />
                                                }
                                                label="Analytics"
                                                onClick={[Function]}
                                                theme={Object {}}
                                              >
                                                <a
                                                  className=""
                                                  data-react-toolbox="link"
                                                  onClick={[Function]}
                                                >
                                                  <FontIcon
                                                    alt=""
                                                    className=""
                                                    value={
                                                      <img
                                                        alt="Analytics"
                                                        src="test-file-stub"
                                                      />
                                                    }
                                                  >
                                                    <span
                                                      aria-label=""
                                                      className=""
                                                      data-react-toolbox="font-icon"
                                                    >
                                                      <img
                                                        alt="Analytics"
                                                        src="test-file-stub"
                                                      />
                                                    </span>
                                                  </FontIcon>
                                                  <abbr>
                                                    Analytics
                                                  </abbr>
                                                </a>
                                              </Link>
                                            </ThemedLink>
                                          </Route>
                                        </NavLink>
                                        <NavLink
                                          exact={false}
                                          icon={
                                            <img
                                              alt="Settings"
                                              src="test-file-stub"
                                            />
                                          }
                                          label="Settings"
                                          strict={false}
                                          to="/settings"
                                        >
                                          <Route
                                            exact={false}
                                            path="/settings"
                                            strict={false}
                                          >
                                            <ThemedLink
                                              active={true}
                                              className=""
                                              composeTheme="deeply"
                                              icon={
                                                <img
                                                  alt="Settings"
                                                  src="test-file-stub"
                                                />
                                              }
                                              label="Settings"
                                              mapThemrProps={[Function]}
                                              onClick={[Function]}
                                            >
                                              <Link
                                                active={true}
                                                className=""
                                                icon={
                                                  <img
                                                    alt="Settings"
                                                    src="test-file-stub"
                                                  />
                                                }
                                                label="Settings"
                                                onClick={[Function]}
                                                theme={Object {}}
                                              >
                                                <a
                                                  className="undefined"
                                                  data-react-toolbox="link"
                                                  onClick={[Function]}
                                                >
                                                  <FontIcon
                                                    alt=""
                                                    className=""
                                                    value={
                                                      <img
                                                        alt="Settings"
                                                        src="test-file-stub"
                                                      />
                                                    }
                                                  >
                                                    <span
                                                      aria-label=""
                                                      className=""
                                                      data-react-toolbox="font-icon"
                                                    >
                                                      <img
                                                        alt="Settings"
                                                        src="test-file-stub"
                                                      />
                                                    </span>
                                                  </FontIcon>
                                                  <abbr>
                                                    Settings
                                                  </abbr>
                                                </a>
                                              </Link>
                                            </ThemedLink>
                                          </Route>
                                        </NavLink>
                                        <NavLink
                                          exact={false}
                                          icon={
                                            <img
                                              alt="Room Feedback"
                                              src="test-file-stub"
                                            />
                                          }
                                          label="Room Feedback"
                                          strict={false}
                                          to="/feedback"
                                        >
                                          <Route
                                            exact={false}
                                            path="/feedback"
                                            strict={false}
                                          >
                                            <ThemedLink
                                              active={false}
                                              className=""
                                              composeTheme="deeply"
                                              icon={
                                                <img
                                                  alt="Room Feedback"
                                                  src="test-file-stub"
                                                />
                                              }
                                              label="Room Feedback"
                                              mapThemrProps={[Function]}
                                              onClick={[Function]}
                                            >
                                              <Link
                                                active={false}
                                                className=""
                                                icon={
                                                  <img
                                                    alt="Room Feedback"
                                                    src="test-file-stub"
                                                  />
                                                }
                                                label="Room Feedback"
                                                onClick={[Function]}
                                                theme={Object {}}
                                              >
                                                <a
                                                  className=""
                                                  data-react-toolbox="link"
                                                  onClick={[Function]}
                                                >
                                                  <FontIcon
                                                    alt=""
                                                    className=""
                                                    value={
                                                      <img
                                                        alt="Room Feedback"
                                                        src="test-file-stub"
                                                      />
                                                    }
                                                  >
                                                    <span
                                                      aria-label=""
                                                      className=""
                                                      data-react-toolbox="font-icon"
                                                    >
                                                      <img
                                                        alt="Room Feedback"
                                                        src="test-file-stub"
                                                      />
                                                    </span>
                                                  </FontIcon>
                                                  <abbr>
                                                    Room Feedback
                                                  </abbr>
                                                </a>
                                              </Link>
                                            </ThemedLink>
                                          </Route>
                                        </NavLink>
                                      </nav>
                                    </Navigation>
                                  </ThemedNavigation>
                                </div>
                              </header>
                            </AppBar>
                          </ThemedAppBar>
                        </div>
                      </TopNav>
                    </NavBar>
                    <SettingsContent>
                      <div
                        className="settings-vertical"
                      >
                        <SettingsNav>
                          <div
                            className="settings-tabs"
                          >
                            <ul>
                              <li>
                                <NavLink
                                  activeClassName="active"
                                  ariaCurrent="true"
                                  to="/settings/offices"
                                >
                                  <Route
                                    path="/settings/offices"
                                  >
                                    <Link
                                      aria-current="true"
                                      className="active"
                                      replace={false}
                                      style={Object {}}
                                      to="/settings/offices"
                                    >
                                      <a
                                        aria-current="true"
                                        className="active"
                                        href="/settings/offices"
                                        onClick={[Function]}
                                        style={Object {}}
                                      >
                                        Offices
                                      </a>
                                    </Link>
                                  </Route>
                                </NavLink>
                              </li>
                              <li>
                                <NavLink
                                  activeClassName="active"
                                  ariaCurrent="true"
                                  to="/settings/rooms"
                                >
                                  <Route
                                    path="/settings/rooms"
                                  >
                                    <Link
                                      aria-current={false}
                                      replace={false}
                                      to="/settings/rooms"
                                    >
                                      <a
                                        aria-current={false}
                                        href="/settings/rooms"
                                        onClick={[Function]}
                                      >
                                        Rooms
                                      </a>
                                    </Link>
                                  </Route>
                                </NavLink>
                              </li>
                              <li>
                                <NavLink
                                  activeClassName="active"
                                  ariaCurrent="true"
                                  to="/settings/resources"
                                >
                                  <Route
                                    path="/settings/resources"
                                  >
                                    <Link
                                      aria-current={false}
                                      replace={false}
                                      to="/settings/resources"
                                    >
                                      <a
                                        aria-current={false}
                                        href="/settings/resources"
                                        onClick={[Function]}
                                      >
                                        Resources
                                      </a>
                                    </Link>
                                  </Route>
                                </NavLink>
                              </li>
                              <li>
                                <NavLink
                                  activeClassName="active"
                                  ariaCurrent="true"
                                  to="/settings/people"
                                >
                                  <Route
                                    path="/settings/people"
                                  >
                                    <Link
                                      aria-current={false}
                                      replace={false}
                                      to="/settings/people"
                                    >
                                      <a
                                        aria-current={false}
                                        href="/settings/people"
                                        onClick={[Function]}
                                      >
                                        People
                                      </a>
                                    </Link>
                                  </Route>
                                </NavLink>
                              </li>
                              <li>
                                <NavLink
                                  activeClassName="active"
                                  ariaCurrent="true"
                                  to="/settings/devices"
                                >
                                  <Route
                                    path="/settings/devices"
                                  >
                                    <Link
                                      aria-current={false}
                                      replace={false}
                                      to="/settings/devices"
                                    >
                                      <a
                                        aria-current={false}
                                        href="/settings/devices"
                                        onClick={[Function]}
                                      >
                                        Devices
                                      </a>
                                    </Link>
                                  </Route>
                                </NavLink>
                              </li>
                              <li>
                                <NavLink
                                  activeClassName="active"
                                  ariaCurrent="true"
                                  to="/settings/integrations"
                                >
                                  <Route
                                    path="/settings/integrations"
                                  >
                                    <Link
                                      aria-current={false}
                                      replace={false}
                                      to="/settings/integrations"
                                    >
                                      <a
                                        aria-current={false}
                                        href="/settings/integrations"
                                        onClick={[Function]}
                                      >
                                        Integrations
                                      </a>
                                    </Link>
                                  </Route>
                                </NavLink>
                              </li>
                            </ul>
                          </div>
                        </SettingsNav>
                        <div
                          className="settings-tab-content"
                        >
                          <Switch>
                            <Route
                              component={[Function]}
                              computedMatch={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/settings/offices",
                                  "url": "/settings/offices",
                                }
                              }
                              exact={true}
                              location={
                                Object {
                                  "hash": "",
                                  "pathname": "/settings/offices",
                                  "search": "",
                                  "state": undefined,
                                }
                              }
                              path="/settings/offices"
                            >
                              <OfficeList
                                history={
                                  Object {
                                    "action": "REPLACE",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "pathname": "/",
                                        "search": "",
                                        "state": undefined,
                                      },
                                      Object {
                                        "hash": "",
                                        "pathname": "/settings/offices",
                                        "search": "",
                                        "state": undefined,
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 1,
                                    "length": 2,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/settings/offices",
                                      "search": "",
                                      "state": undefined,
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/settings/offices",
                                    "search": "",
                                    "state": undefined,
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/settings/offices",
                                    "url": "/settings/offices",
                                  }
                                }
                              >
                                <div
                                  className="settings-offices"
                                >
                                  <Apollo(Apollo(AddOffice))>
                                    <Query
                                      displayName="Apollo(Apollo(AddOffice))"
                                      query={
                                        Object {
                                          "definitions": Array [
                                            Object {
                                              "directives": Array [],
                                              "kind": "OperationDefinition",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "locations",
                                              },
                                              "operation": "query",
                                              "selectionSet": Object {
                                                "kind": "SelectionSet",
                                                "selections": Array [
                                                  Object {
                                                    "alias": undefined,
                                                    "arguments": Array [],
                                                    "directives": Array [],
                                                    "kind": "Field",
                                                    "name": Object {
                                                      "kind": "Name",
                                                      "value": "allLocations",
                                                    },
                                                    "selectionSet": Object {
                                                      "kind": "SelectionSet",
                                                      "selections": Array [
                                                        Object {
                                                          "alias": undefined,
                                                          "arguments": Array [],
                                                          "directives": Array [],
                                                          "kind": "Field",
                                                          "name": Object {
                                                            "kind": "Name",
                                                            "value": "id",
                                                          },
                                                          "selectionSet": undefined,
                                                        },
                                                        Object {
                                                          "alias": undefined,
                                                          "arguments": Array [],
                                                          "directives": Array [],
                                                          "kind": "Field",
                                                          "name": Object {
                                                            "kind": "Name",
                                                            "value": "name",
                                                          },
                                                          "selectionSet": undefined,
                                                        },
                                                      ],
                                                    },
                                                  },
                                                ],
                                              },
                                              "variableDefinitions": Array [],
                                            },
                                          ],
                                          "kind": "Document",
                                          "loc": Object {
                                            "end": 57,
                                            "start": 0,
                                          },
                                        }
                                      }
                                      skip={false}
                                      warnUnhandledError={true}
                                    >
                                      <Apollo(AddOffice)
                                        locations={
                                          Object {
                                            "error": undefined,
                                            "fetchMore": [Function],
                                            "loading": true,
                                            "networkStatus": 1,
                                            "refetch": [Function],
                                            "startPolling": [Function],
                                            "stopPolling": [Function],
                                            "subscribeToMore": [Function],
                                            "updateQuery": [Function],
                                            "variables": Object {},
                                          }
                                        }
                                      >
                                        <Mutation
                                          ignoreResults={true}
                                          mutation={
                                            Object {
                                              "definitions": Array [
                                                Object {
                                                  "directives": Array [],
                                                  "kind": "OperationDefinition",
                                                  "name": Object {
                                                    "kind": "Name",
                                                    "value": "createOffice",
                                                  },
                                                  "operation": "mutation",
                                                  "selectionSet": Object {
                                                    "kind": "SelectionSet",
                                                    "selections": Array [
                                                      Object {
                                                        "alias": undefined,
                                                        "arguments": Array [
                                                          Object {
                                                            "kind": "Argument",
                                                            "name": Object {
                                                              "kind": "Name",
                                                              "value": "locationId",
                                                            },
                                                            "value": Object {
                                                              "kind": "Variable",
                                                              "name": Object {
                                                                "kind": "Name",
                                                                "value": "locationId",
                                                              },
                                                            },
                                                          },
                                                          Object {
                                                            "kind": "Argument",
                                                            "name": Object {
                                                              "kind": "Name",
                                                              "value": "name",
                                                            },
                                                            "value": Object {
                                                              "kind": "Variable",
                                                              "name": Object {
                                                                "kind": "Name",
                                                                "value": "name",
                                                              },
                                                            },
                                                          },
                                                        ],
                                                        "directives": Array [],
                                                        "kind": "Field",
                                                        "name": Object {
                                                          "kind": "Name",
                                                          "value": "createOffice",
                                                        },
                                                        "selectionSet": Object {
                                                          "kind": "SelectionSet",
                                                          "selections": Array [
                                                            Object {
                                                              "alias": undefined,
                                                              "arguments": Array [],
                                                              "directives": Array [],
                                                              "kind": "Field",
                                                              "name": Object {
                                                                "kind": "Name",
                                                                "value": "office",
                                                              },
                                                              "selectionSet": Object {
                                                                "kind": "SelectionSet",
                                                                "selections": Array [
                                                                  Object {
                                                                    "alias": undefined,
                                                                    "arguments": Array [],
                                                                    "directives": Array [],
                                                                    "kind": "Field",
                                                                    "name": Object {
                                                                      "kind": "Name",
                                                                      "value": "id",
                                                                    },
                                                                    "selectionSet": undefined,
                                                                  },
                                                                  Object {
                                                                    "alias": undefined,
                                                                    "arguments": Array [],
                                                                    "directives": Array [],
                                                                    "kind": "Field",
                                                                    "name": Object {
                                                                      "kind": "Name",
                                                                      "value": "name",
                                                                    },
                                                                    "selectionSet": undefined,
                                                                  },
                                                                ],
                                                              },
                                                            },
                                                          ],
                                                        },
                                                      },
                                                    ],
                                                  },
                                                  "variableDefinitions": Array [
                                                    Object {
                                                      "defaultValue": undefined,
                                                      "kind": "VariableDefinition",
                                                      "type": Object {
                                                        "kind": "NonNullType",
                                                        "type": Object {
                                                          "kind": "NamedType",
                                                          "name": Object {
                                                            "kind": "Name",
                                                            "value": "Int",
                                                          },
                                                        },
                                                      },
                                                      "variable": Object {
                                                        "kind": "Variable",
                                                        "name": Object {
                                                          "kind": "Name",
                                                          "value": "locationId",
                                                        },
                                                      },
                                                    },
                                                    Object {
                                                      "defaultValue": undefined,
                                                      "kind": "VariableDefinition",
                                                      "type": Object {
                                                        "kind": "NonNullType",
                                                        "type": Object {
                                                          "kind": "NamedType",
                                                          "name": Object {
                                                            "kind": "Name",
                                                            "value": "String",
                                                          },
                                                        },
                                                      },
                                                      "variable": Object {
                                                        "kind": "Variable",
                                                        "name": Object {
                                                          "kind": "Name",
                                                          "value": "name",
                                                        },
                                                      },
                                                    },
                                                  ],
                                                },
                                              ],
                                              "kind": "Document",
                                              "loc": Object {
                                                "end": 174,
                                                "start": 0,
                                              },
                                            }
                                          }
                                        >
                                          <AddOffice
                                            addOffice={[Function]}
                                            locations={
                                              Object {
                                                "error": undefined,
                                                "fetchMore": [Function],
                                                "loading": true,
                                                "networkStatus": 1,
                                                "refetch": [Function],
                                                "startPolling": [Function],
                                                "stopPolling": [Function],
                                                "subscribeToMore": [Function],
                                                "updateQuery": [Function],
                                                "variables": Object {},
                                              }
                                            }
                                          >
                                            <MrmModal
                                              buttonText="Add Office"
                                              className="add-office-modal"
                                              closeModal={false}
                                              handleCloseRequest={[Function]}
                                              modalButton="add-button"
                                              modalButtonClassName="button"
                                              title="ADD OFFICE"
                                            >
                                              <IconButtons
                                                buttonText="Add Office"
                                                modalButtonClassName="button"
                                                openModal={[Function]}
                                              >
                                                <button
                                                  className="button"
                                                  id="modal-button"
                                                  onClick={[Function]}
                                                >
                                                  Add Office
                                                </button>
                                              </IconButtons>
                                              <Modal
                                                ariaHideApp={false}
                                                bodyOpenClassName="ReactModal__Body--open"
                                                className="add-office-modal"
                                                closeTimeoutMS={0}
                                                contentLabel="Parent Modal"
                                                isOpen={false}
                                                onAfterOpen={[Function]}
                                                onRequestClose={[Function]}
                                                parentSelector={[Function]}
                                                portalClassName="ReactModalPortal"
                                                shouldCloseOnEsc={true}
                                                shouldCloseOnOverlayClick={false}
                                                shouldFocusAfterRender={true}
                                                shouldReturnFocusAfterClose={true}
                                                style={
                                                  Object {
                                                    "content": Object {
                                                      "backgroundColor": "#ffffff",
                                                      "border": "1px solid #CCCCCC",
                                                      "borderRadius": "4px",
                                                      "bottom": "auto",
                                                      "boxShadow": "0 2px 40px 10px rgba(185, 180, 180, 0.2)",
                                                      "fontFamily": "DINPro-Regular",
                                                      "left": "50%",
                                                      "marginRight": "-50%",
                                                      "outline": "none",
                                                      "overflow": "auto",
                                                      "position": "absolute",
                                                      "right": "auto",
                                                      "top": "50%",
                                                      "transform": "translate(-50%, -50%)",
                                                    },
                                                  }
                                                }
                                              >
                                                <ModalPortal
                                                  ariaHideApp={false}
                                                  bodyOpenClassName="ReactModal__Body--open"
                                                  className="add-office-modal"
                                                  closeTimeoutMS={0}
                                                  contentLabel="Parent Modal"
                                                  defaultStyles={
                                                    Object {
                                                      "content": Object {
                                                        "WebkitOverflowScrolling": "touch",
                                                        "background": "#fff",
                                                        "border": "1px solid #ccc",
                                                        "borderRadius": "4px",
                                                        "bottom": "40px",
                                                        "left": "40px",
                                                        "outline": "none",
                                                        "overflow": "auto",
                                                        "padding": "20px",
                                                        "position": "absolute",
                                                        "right": "40px",
                                                        "top": "40px",
                                                      },
                                                      "overlay": Object {
                                                        "backgroundColor": "rgba(255, 255, 255, 0.75)",
                                                        "bottom": 0,
                                                        "left": 0,
                                                        "position": "fixed",
                                                        "right": 0,
                                                        "top": 0,
                                                      },
                                                    }
                                                  }
                                                  isOpen={false}
                                                  onAfterOpen={[Function]}
                                                  onRequestClose={[Function]}
                                                  parentSelector={[Function]}
                                                  portalClassName="ReactModalPortal"
                                                  shouldCloseOnEsc={true}
                                                  shouldCloseOnOverlayClick={false}
                                                  shouldFocusAfterRender={true}
                                                  shouldReturnFocusAfterClose={true}
                                                  style={
                                                    Object {
                                                      "content": Object {
                                                        "backgroundColor": "#ffffff",
                                                        "border": "1px solid #CCCCCC",
                                                        "borderRadius": "4px",
                                                        "bottom": "auto",
                                                        "boxShadow": "0 2px 40px 10px rgba(185, 180, 180, 0.2)",
                                                        "fontFamily": "DINPro-Regular",
                                                        "left": "50%",
                                                        "marginRight": "-50%",
                                                        "outline": "none",
                                                        "overflow": "auto",
                                                        "position": "absolute",
                                                        "right": "auto",
                                                        "top": "50%",
                                                        "transform": "translate(-50%, -50%)",
                                                      },
                                                    }
                                                  }
                                                />
                                              </Modal>
                                            </MrmModal>
                                          </AddOffice>
                                        </Mutation>
                                      </Apollo(AddOffice)>
                                    </Query>
                                  </Apollo(Apollo(AddOffice))>
                                  <div
                                    className="settings-offices-list"
                                  >
                                    <table>
                                      <ColGroup
                                        numberOfMiddleColumns={2}
                                      >
                                        <colgroup>
                                          <col
                                            className="first-col"
                                          />
                                          <col
                                            key="col0"
                                          />
                                          <col
                                            key="col1"
                                          />
                                          <col
                                            className="last-col"
                                          />
                                        </colgroup>
                                      </ColGroup>
                                      <TableHead
                                        titles={
                                          Array [
                                            "Office",
                                            "Location",
                                            "Timezone",
                                            "Action",
                                          ]
                                        }
                                      >
                                        <thead>
                                          <tr>
                                            <th
                                              key="Office"
                                            >
                                              Office
                                            </th>
                                            <th
                                              key="Location"
                                            >
                                              Location
                                            </th>
                                            <th
                                              key="Timezone"
                                            >
                                              Timezone
                                            </th>
                                            <th
                                              key="Action"
                                            >
                                              Action
                                            </th>
                                          </tr>
                                        </thead>
                                      </TableHead>
                                      <tbody>
                                        <Office
                                          key="EPIC Tower"
                                          office={
                                            Object {
                                              "location": "Nigeria",
                                              "name": "EPIC Tower",
                                              "timezone": "GMT +1",
                                            }
                                          }
                                        >
                                          <tr>
                                            <td>
                                              EPIC Tower
                                            </td>
                                            <td>
                                              Nigeria
                                            </td>
                                            <td>
                                              GMT +1
                                            </td>
                                            <td>
                                              <EditOffice
                                                location="Nigeria"
                                                officeName="EPIC Tower"
                                              >
                                                <MrmModal
                                                  buttonText="Edit"
                                                  className="edit-office-modal"
                                                  closeModal={false}
                                                  handleCloseRequest={[Function]}
                                                  modalButtonClassName="edit-button"
                                                  title="EDIT OFFICE"
                                                >
                                                  <IconButtons
                                                    buttonText="Edit"
                                                    modalButtonClassName="edit-button"
                                                    openModal={[Function]}
                                                  >
                                                    <button
                                                      className="edit-button"
                                                      id="modal-button"
                                                      onClick={[Function]}
                                                    >
                                                      <img
                                                        alt="Edit"
                                                        src="test-file-stub"
                                                      />
                                                    </button>
                                                  </IconButtons>
                                                  <Modal
                                                    ariaHideApp={false}
                                                    bodyOpenClassName="ReactModal__Body--open"
                                                    className="edit-office-modal"
                                                    closeTimeoutMS={0}
                                                    contentLabel="Parent Modal"
                                                    isOpen={false}
                                                    onAfterOpen={[Function]}
                                                    onRequestClose={[Function]}
                                                    parentSelector={[Function]}
                                                    portalClassName="ReactModalPortal"
                                                    shouldCloseOnEsc={true}
                                                    shouldCloseOnOverlayClick={false}
                                                    shouldFocusAfterRender={true}
                                                    shouldReturnFocusAfterClose={true}
                                                    style={
                                                      Object {
                                                        "content": Object {
                                                          "backgroundColor": "#ffffff",
                                                          "border": "1px solid #CCCCCC",
                                                          "borderRadius": "4px",
                                                          "bottom": "auto",
                                                          "boxShadow": "0 2px 40px 10px rgba(185, 180, 180, 0.2)",
                                                          "fontFamily": "DINPro-Regular",
                                                          "left": "50%",
                                                          "marginRight": "-50%",
                                                          "outline": "none",
                                                          "overflow": "auto",
                                                          "position": "absolute",
                                                          "right": "auto",
                                                          "top": "50%",
                                                          "transform": "translate(-50%, -50%)",
                                                        },
                                                      }
                                                    }
                                                  >
                                                    <ModalPortal
                                                      ariaHideApp={false}
                                                      bodyOpenClassName="ReactModal__Body--open"
                                                      className="edit-office-modal"
                                                      closeTimeoutMS={0}
                                                      contentLabel="Parent Modal"
                                                      defaultStyles={
                                                        Object {
                                                          "content": Object {
                                                            "WebkitOverflowScrolling": "touch",
                                                            "background": "#fff",
                                                            "border": "1px solid #ccc",
                                                            "borderRadius": "4px",
                                                            "bottom": "40px",
                                                            "left": "40px",
                                                            "outline": "none",
                                                            "overflow": "auto",
                                                            "padding": "20px",
                                                            "position": "absolute",
                                                            "right": "40px",
                                                            "top": "40px",
                                                          },
                                                          "overlay": Object {
                                                            "backgroundColor": "rgba(255, 255, 255, 0.75)",
                                                            "bottom": 0,
                                                            "left": 0,
                                                            "position": "fixed",
                                                            "right": 0,
                                                            "top": 0,
                                                          },
                                                        }
                                                      }
                                                      isOpen={false}
                                                      onAfterOpen={[Function]}
                                                      onRequestClose={[Function]}
                                                      parentSelector={[Function]}
                                                      portalClassName="ReactModalPortal"
                                                      shouldCloseOnEsc={true}
                                                      shouldCloseOnOverlayClick={false}
                                                      shouldFocusAfterRender={true}
                                                      shouldReturnFocusAfterClose={true}
                                                      style={
                                                        Object {
                                                          "content": Object {
                                                            "backgroundColor": "#ffffff",
                                                            "border": "1px solid #CCCCCC",
                                                            "borderRadius": "4px",
                                                            "bottom": "auto",
                                                            "boxShadow": "0 2px 40px 10px rgba(185, 180, 180, 0.2)",
                                                            "fontFamily": "DINPro-Regular",
                                                            "left": "50%",
                                                            "marginRight": "-50%",
                                                            "outline": "none",
                                                            "overflow": "auto",
                                                            "position": "absolute",
                                                            "right": "auto",
                                                            "top": "50%",
                                                            "transform": "translate(-50%, -50%)",
                                                          },
                                                        }
                                                      }
                                                    />
                                                  </Modal>
                                                </MrmModal>
                                              </EditOffice>
                                              <DeleteOffice
                                                id="delete-modal"
                                                officeName="EPIC Tower"
                                              >
                                                <MrmModal
                                                  buttonText="Delete"
                                                  className="delete-modal"
                                                  closeModal={false}
                                                  handleCloseRequest={[Function]}
                                                  modalButtonClassName="button"
                                                  title="DELETE OFFICE"
                                                >
                                                  <IconButtons
                                                    buttonText="Delete"
                                                    modalButtonClassName="button"
                                                    openModal={[Function]}
                                                  >
                                                    <button
                                                      className="button"
                                                      id="modal-button"
                                                      onClick={[Function]}
                                                    >
                                                      <img
                                                        alt="Delete"
                                                        src="test-file-stub"
                                                      />
                                                    </button>
                                                  </IconButtons>
                                                  <Modal
                                                    ariaHideApp={false}
                                                    bodyOpenClassName="ReactModal__Body--open"
                                                    className="delete-modal"
                                                    closeTimeoutMS={0}
                                                    contentLabel="Parent Modal"
                                                    isOpen={false}
                                                    onAfterOpen={[Function]}
                                                    onRequestClose={[Function]}
                                                    parentSelector={[Function]}
                                                    portalClassName="ReactModalPortal"
                                                    shouldCloseOnEsc={true}
                                                    shouldCloseOnOverlayClick={false}
                                                    shouldFocusAfterRender={true}
                                                    shouldReturnFocusAfterClose={true}
                                                    style={
                                                      Object {
                                                        "content": Object {
                                                          "backgroundColor": "#ffffff",
                                                          "border": "1px solid #CCCCCC",
                                                          "borderRadius": "4px",
                                                          "bottom": "auto",
                                                          "boxShadow": "0 2px 40px 10px rgba(185, 180, 180, 0.2)",
                                                          "fontFamily": "DINPro-Regular",
                                                          "left": "50%",
                                                          "marginRight": "-50%",
                                                          "outline": "none",
                                                          "overflow": "auto",
                                                          "position": "absolute",
                                                          "right": "auto",
                                                          "top": "50%",
                                                          "transform": "translate(-50%, -50%)",
                                                        },
                                                      }
                                                    }
                                                  >
                                                    <ModalPortal
                                                      ariaHideApp={false}
                                                      bodyOpenClassName="ReactModal__Body--open"
                                                      className="delete-modal"
                                                      closeTimeoutMS={0}
                                                      contentLabel="Parent Modal"
                                                      defaultStyles={
                                                        Object {
                                                          "content": Object {
                                                            "WebkitOverflowScrolling": "touch",
                                                            "background": "#fff",
                                                            "border": "1px solid #ccc",
                                                            "borderRadius": "4px",
                                                            "bottom": "40px",
                                                            "left": "40px",
                                                            "outline": "none",
                                                            "overflow": "auto",
                                                            "padding": "20px",
                                                            "position": "absolute",
                                                            "right": "40px",
                                                            "top": "40px",
                                                          },
                                                          "overlay": Object {
                                                            "backgroundColor": "rgba(255, 255, 255, 0.75)",
                                                            "bottom": 0,
                                                            "left": 0,
                                                            "position": "fixed",
                                                            "right": 0,
                                                            "top": 0,
                                                          },
                                                        }
                                                      }
                                                      isOpen={false}
                                                      onAfterOpen={[Function]}
                                                      onRequestClose={[Function]}
                                                      parentSelector={[Function]}
                                                      portalClassName="ReactModalPortal"
                                                      shouldCloseOnEsc={true}
                                                      shouldCloseOnOverlayClick={false}
                                                      shouldFocusAfterRender={true}
                                                      shouldReturnFocusAfterClose={true}
                                                      style={
                                                        Object {
                                                          "content": Object {
                                                            "backgroundColor": "#ffffff",
                                                            "border": "1px solid #CCCCCC",
                                                            "borderRadius": "4px",
                                                            "bottom": "auto",
                                                            "boxShadow": "0 2px 40px 10px rgba(185, 180, 180, 0.2)",
                                                            "fontFamily": "DINPro-Regular",
                                                            "left": "50%",
                                                            "marginRight": "-50%",
                                                            "outline": "none",
                                                            "overflow": "auto",
                                                            "position": "absolute",
                                                            "right": "auto",
                                                            "top": "50%",
                                                            "transform": "translate(-50%, -50%)",
                                                          },
                                                        }
                                                      }
                                                    />
                                                  </Modal>
                                                </MrmModal>
                                              </DeleteOffice>
                                            </td>
                                          </tr>
                                        </Office>
                                        <Office
                                          key="Invisible Building"
                                          office={
                                            Object {
                                              "location": "Kenya",
                                              "name": "Invisible Building",
                                              "timezone": "GMT -1",
                                            }
                                          }
                                        >
                                          <tr>
                                            <td>
                                              Invisible Building
                                            </td>
                                            <td>
                                              Kenya
                                            </td>
                                            <td>
                                              GMT -1
                                            </td>
                                            <td>
                                              <EditOffice
                                                location="Kenya"
                                                officeName="Invisible Building"
                                              >
                                                <MrmModal
                                                  buttonText="Edit"
                                                  className="edit-office-modal"
                                                  closeModal={false}
                                                  handleCloseRequest={[Function]}
                                                  modalButtonClassName="edit-button"
                                                  title="EDIT OFFICE"
                                                >
                                                  <IconButtons
                                                    buttonText="Edit"
                                                    modalButtonClassName="edit-button"
                                                    openModal={[Function]}
                                                  >
                                                    <button
                                                      className="edit-button"
                                                      id="modal-button"
                                                      onClick={[Function]}
                                                    >
                                                      <img
                                                        alt="Edit"
                                                        src="test-file-stub"
                                                      />
                                                    </button>
                                                  </IconButtons>
                                                  <Modal
                                                    ariaHideApp={false}
                                                    bodyOpenClassName="ReactModal__Body--open"
                                                    className="edit-office-modal"
                                                    closeTimeoutMS={0}
                                                    contentLabel="Parent Modal"
                                                    isOpen={false}
                                                    onAfterOpen={[Function]}
                                                    onRequestClose={[Function]}
                                                    parentSelector={[Function]}
                                                    portalClassName="ReactModalPortal"
                                                    shouldCloseOnEsc={true}
                                                    shouldCloseOnOverlayClick={false}
                                                    shouldFocusAfterRender={true}
                                                    shouldReturnFocusAfterClose={true}
                                                    style={
                                                      Object {
                                                        "content": Object {
                                                          "backgroundColor": "#ffffff",
                                                          "border": "1px solid #CCCCCC",
                                                          "borderRadius": "4px",
                                                          "bottom": "auto",
                                                          "boxShadow": "0 2px 40px 10px rgba(185, 180, 180, 0.2)",
                                                          "fontFamily": "DINPro-Regular",
                                                          "left": "50%",
                                                          "marginRight": "-50%",
                                                          "outline": "none",
                                                          "overflow": "auto",
                                                          "position": "absolute",
                                                          "right": "auto",
                                                          "top": "50%",
                                                          "transform": "translate(-50%, -50%)",
                                                        },
                                                      }
                                                    }
                                                  >
                                                    <ModalPortal
                                                      ariaHideApp={false}
                                                      bodyOpenClassName="ReactModal__Body--open"
                                                      className="edit-office-modal"
                                                      closeTimeoutMS={0}
                                                      contentLabel="Parent Modal"
                                                      defaultStyles={
                                                        Object {
                                                          "content": Object {
                                                            "WebkitOverflowScrolling": "touch",
                                                            "background": "#fff",
                                                            "border": "1px solid #ccc",
                                                            "borderRadius": "4px",
                                                            "bottom": "40px",
                                                            "left": "40px",
                                                            "outline": "none",
                                                            "overflow": "auto",
                                                            "padding": "20px",
                                                            "position": "absolute",
                                                            "right": "40px",
                                                            "top": "40px",
                                                          },
                                                          "overlay": Object {
                                                            "backgroundColor": "rgba(255, 255, 255, 0.75)",
                                                            "bottom": 0,
                                                            "left": 0,
                                                            "position": "fixed",
                                                            "right": 0,
                                                            "top": 0,
                                                          },
                                                        }
                                                      }
                                                      isOpen={false}
                                                      onAfterOpen={[Function]}
                                                      onRequestClose={[Function]}
                                                      parentSelector={[Function]}
                                                      portalClassName="ReactModalPortal"
                                                      shouldCloseOnEsc={true}
                                                      shouldCloseOnOverlayClick={false}
                                                      shouldFocusAfterRender={true}
                                                      shouldReturnFocusAfterClose={true}
                                                      style={
                                                        Object {
                                                          "content": Object {
                                                            "backgroundColor": "#ffffff",
                                                            "border": "1px solid #CCCCCC",
                                                            "borderRadius": "4px",
                                                            "bottom": "auto",
                                                            "boxShadow": "0 2px 40px 10px rgba(185, 180, 180, 0.2)",
                                                            "fontFamily": "DINPro-Regular",
                                                            "left": "50%",
                                                            "marginRight": "-50%",
                                                            "outline": "none",
                                                            "overflow": "auto",
                                                            "position": "absolute",
                                                            "right": "auto",
                                                            "top": "50%",
                                                            "transform": "translate(-50%, -50%)",
                                                          },
                                                        }
                                                      }
                                                    />
                                                  </Modal>
                                                </MrmModal>
                                              </EditOffice>
                                              <DeleteOffice
                                                id="delete-modal"
                                                officeName="Invisible Building"
                                              >
                                                <MrmModal
                                                  buttonText="Delete"
                                                  className="delete-modal"
                                                  closeModal={false}
                                                  handleCloseRequest={[Function]}
                                                  modalButtonClassName="button"
                                                  title="DELETE OFFICE"
                                                >
                                                  <IconButtons
                                                    buttonText="Delete"
                                                    modalButtonClassName="button"
                                                    openModal={[Function]}
                                                  >
                                                    <button
                                                      className="button"
                                                      id="modal-button"
                                                      onClick={[Function]}
                                                    >
                                                      <img
                                                        alt="Delete"
                                                        src="test-file-stub"
                                                      />
                                                    </button>
                                                  </IconButtons>
                                                  <Modal
                                                    ariaHideApp={false}
                                                    bodyOpenClassName="ReactModal__Body--open"
                                                    className="delete-modal"
                                                    closeTimeoutMS={0}
                                                    contentLabel="Parent Modal"
                                                    isOpen={false}
                                                    onAfterOpen={[Function]}
                                                    onRequestClose={[Function]}
                                                    parentSelector={[Function]}
                                                    portalClassName="ReactModalPortal"
                                                    shouldCloseOnEsc={true}
                                                    shouldCloseOnOverlayClick={false}
                                                    shouldFocusAfterRender={true}
                                                    shouldReturnFocusAfterClose={true}
                                                    style={
                                                      Object {
                                                        "content": Object {
                                                          "backgroundColor": "#ffffff",
                                                          "border": "1px solid #CCCCCC",
                                                          "borderRadius": "4px",
                                                          "bottom": "auto",
                                                          "boxShadow": "0 2px 40px 10px rgba(185, 180, 180, 0.2)",
                                                          "fontFamily": "DINPro-Regular",
                                                          "left": "50%",
                                                          "marginRight": "-50%",
                                                          "outline": "none",
                                                          "overflow": "auto",
                                                          "position": "absolute",
                                                          "right": "auto",
                                                          "top": "50%",
                                                          "transform": "translate(-50%, -50%)",
                                                        },
                                                      }
                                                    }
                                                  >
                                                    <ModalPortal
                                                      ariaHideApp={false}
                                                      bodyOpenClassName="ReactModal__Body--open"
                                                      className="delete-modal"
                                                      closeTimeoutMS={0}
                                                      contentLabel="Parent Modal"
                                                      defaultStyles={
                                                        Object {
                                                          "content": Object {
                                                            "WebkitOverflowScrolling": "touch",
                                                            "background": "#fff",
                                                            "border": "1px solid #ccc",
                                                            "borderRadius": "4px",
                                                            "bottom": "40px",
                                                            "left": "40px",
                                                            "outline": "none",
                                                            "overflow": "auto",
                                                            "padding": "20px",
                                                            "position": "absolute",
                                                            "right": "40px",
                                                            "top": "40px",
                                                          },
                                                          "overlay": Object {
                                                            "backgroundColor": "rgba(255, 255, 255, 0.75)",
                                                            "bottom": 0,
                                                            "left": 0,
                                                            "position": "fixed",
                                                            "right": 0,
                                                            "top": 0,
                                                          },
                                                        }
                                                      }
                                                      isOpen={false}
                                                      onAfterOpen={[Function]}
                                                      onRequestClose={[Function]}
                                                      parentSelector={[Function]}
                                                      portalClassName="ReactModalPortal"
                                                      shouldCloseOnEsc={true}
                                                      shouldCloseOnOverlayClick={false}
                                                      shouldFocusAfterRender={true}
                                                      shouldReturnFocusAfterClose={true}
                                                      style={
                                                        Object {
                                                          "content": Object {
                                                            "backgroundColor": "#ffffff",
                                                            "border": "1px solid #CCCCCC",
                                                            "borderRadius": "4px",
                                                            "bottom": "auto",
                                                            "boxShadow": "0 2px 40px 10px rgba(185, 180, 180, 0.2)",
                                                            "fontFamily": "DINPro-Regular",
                                                            "left": "50%",
                                                            "marginRight": "-50%",
                                                            "outline": "none",
                                                            "overflow": "auto",
                                                            "position": "absolute",
                                                            "right": "auto",
                                                            "top": "50%",
                                                            "transform": "translate(-50%, -50%)",
                                                          },
                                                        }
                                                      }
                                                    />
                                                  </Modal>
                                                </MrmModal>
                                              </DeleteOffice>
                                            </td>
                                          </tr>
                                        </Office>
                                      </tbody>
                                    </table>
                                  </div>
                                </div>
                              </OfficeList>
                            </Route>
                          </Switch>
                        </div>
                      </div>
                    </SettingsContent>
                  </Settings>
                </Route>
              </Switch>
            </App>
          </Route>
        </withRouter(App)>
      </Router>
    </MemoryRouter>
  </ApolloProvider>
</MockedProvider>
`;

exports[`App component should render properly in memory 1`] = `
<MockedProvider
  addTypename={true}
>
  <ApolloProvider
    client={
      ApolloClient {
        "__operations_cache__": Array [],
        "cache": InMemoryCache {
          "addTypename": true,
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "storeFactory": [Function],
          },
          "data": ObjectCache {
            "data": Object {},
          },
          "optimistic": Array [],
          "silenceBroadcast": false,
          "watches": Array [],
        },
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": ApolloLink {
          "request": [Function],
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "ssrMode": false,
        "store": DataStore {
          "cache": InMemoryCache {
            "addTypename": true,
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "storeFactory": [Function],
            },
            "data": ObjectCache {
              "data": Object {},
            },
            "optimistic": Array [],
            "silenceBroadcast": false,
            "watches": Array [],
          },
        },
        "version": "2.3.1",
        "watchQuery": [Function],
      }
    }
  >
    <MemoryRouter
      initialEntries={
        Array [
          "/",
          "/settings",
        ]
      }
      initialIndex={1}
      keyLength={0}
    >
      <Router
        history={
          Object {
            "action": "REPLACE",
            "block": [Function],
            "canGo": [Function],
            "createHref": [Function],
            "entries": Array [
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": undefined,
              },
              Object {
                "hash": "",
                "pathname": "/",
                "search": "",
                "state": Object {
                  "errorMessage": "You need to be loggedin to access this page",
                },
              },
            ],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "index": 1,
            "length": 2,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": Object {
                "errorMessage": "You need to be loggedin to access this page",
              },
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <withRouter(App)>
          <Route
            render={[Function]}
          >
            <App
              history={
                Object {
                  "action": "REPLACE",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": Object {
                        "errorMessage": "You need to be loggedin to access this page",
                      },
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 1,
                  "length": 2,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "pathname": "/",
                    "search": "",
                    "state": Object {
                      "errorMessage": "You need to be loggedin to access this page",
                    },
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "pathname": "/",
                  "search": "",
                  "state": Object {
                    "errorMessage": "You need to be loggedin to access this page",
                  },
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
            >
              <Switch>
                <Route
                  component={[Function]}
                  computedMatch={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  exact={true}
                  location={
                    Object {
                      "hash": "",
                      "pathname": "/",
                      "search": "",
                      "state": Object {
                        "errorMessage": "You need to be loggedin to access this page",
                      },
                    }
                  }
                  path="/"
                >
                  <withRouter(Login)
                    history={
                      Object {
                        "action": "REPLACE",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": Object {
                              "errorMessage": "You need to be loggedin to access this page",
                            },
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 1,
                        "length": 2,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": Object {
                            "errorMessage": "You need to be loggedin to access this page",
                          },
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    location={
                      Object {
                        "hash": "",
                        "pathname": "/",
                        "search": "",
                        "state": Object {
                          "errorMessage": "You need to be loggedin to access this page",
                        },
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                  >
                    <Route
                      render={[Function]}
                    >
                      <Login
                        history={
                          Object {
                            "action": "REPLACE",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": undefined,
                              },
                              Object {
                                "hash": "",
                                "pathname": "/",
                                "search": "",
                                "state": Object {
                                  "errorMessage": "You need to be loggedin to access this page",
                                },
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 1,
                            "length": 2,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": Object {
                                "errorMessage": "You need to be loggedin to access this page",
                              },
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": Object {
                              "errorMessage": "You need to be loggedin to access this page",
                            },
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      >
                        <header
                          className="home-header"
                        >
                          <h1>
                            CONVERGE
                          </h1>
                        </header>
                        <Component>
                          <div
                            id="converge-intro"
                          >
                            Meet the Meeting Room App
                            <br />
                            that your meeting room app aspires to be.
                          </div>
                        </Component>
                        <LoginButton>
                          <a
                            href="undefined=undefined"
                          >
                            <input
                              alt="Login With Your Email"
                              className="btn-signin"
                              src="test-file-stub"
                              type="image"
                            />
                          </a>
                        </LoginButton>
                        <img
                          alt="Dark Tablet"
                          id="dark-tablet"
                          src="test-file-stub"
                        />
                        <ThemedActivableRenderer
                          action="Dismiss"
                          active={true}
                          composeTheme="deeply"
                          delay={500}
                          label="You need to be loggedin to access this page"
                          mapThemrProps={[Function]}
                          onClick={[Function]}
                          onTimeout={[Function]}
                          theme={
                            Object {
                              "button": "button-error",
                              "snackbar": "error",
                            }
                          }
                          timeout={6000}
                          type="cancel"
                        >
                          <ActivableRenderer
                            action="Dismiss"
                            active={true}
                            delay={500}
                            label="You need to be loggedin to access this page"
                            onClick={[Function]}
                            onTimeout={[Function]}
                            theme={
                              Object {
                                "button": "button-error",
                                "snackbar": "error",
                              }
                            }
                            timeout={6000}
                            type="cancel"
                          >
                            <Snackbar
                              action="Dismiss"
                              active={true}
                              label="You need to be loggedin to access this page"
                              onClick={[Function]}
                              onTimeout={[Function]}
                              theme={
                                Object {
                                  "button": "button-error",
                                  "snackbar": "error",
                                }
                              }
                              timeout={6000}
                              type="cancel"
                            >
                              <Portal
                                className=""
                              />
                            </Snackbar>
                          </ActivableRenderer>
                        </ThemedActivableRenderer>
                      </Login>
                    </Route>
                  </withRouter(Login)>
                </Route>
              </Switch>
            </App>
          </Route>
        </withRouter(App)>
      </Router>
    </MemoryRouter>
  </ApolloProvider>
</MockedProvider>
`;
