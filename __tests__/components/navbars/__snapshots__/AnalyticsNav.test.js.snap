// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AnalyticsNav Component renders properly 1`] = `
<ApolloProvider
  client={
    ApolloClient {
      "__operations_cache__": Map {
        "data" => Object {
          "query": Object {
            "definitions": Array [
              Object {
                "directives": Array [],
                "kind": "OperationDefinition",
                "name": undefined,
                "operation": "query",
                "selectionSet": Object {
                  "kind": "SelectionSet",
                  "selections": Array [
                    Object {
                      "alias": undefined,
                      "arguments": Array [
                        Object {
                          "kind": "Argument",
                          "name": Object {
                            "kind": "Name",
                            "value": "dayStart",
                          },
                          "value": Object {
                            "block": false,
                            "kind": "StringValue",
                            "value": "Nov 24 2018",
                          },
                        },
                      ],
                      "directives": Array [],
                      "kind": "Field",
                      "name": Object {
                        "kind": "Name",
                        "value": "dailyDurationsOfMeetings",
                      },
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "MeetingsDurationaAnalytics",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "count",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "roomName",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "totalDuration",
                                  },
                                  "selectionSet": undefined,
                                },
                              ],
                            },
                          },
                        ],
                      },
                    },
                  ],
                },
                "variableDefinitions": Array [],
              },
            ],
            "kind": "Document",
            "loc": Object {
              "end": 178,
              "start": 0,
            },
          },
          "variables": undefined,
        },
      },
      "cache": InMemoryCache {
        "addTypename": true,
        "config": Object {
          "addTypename": true,
          "dataIdFromObject": [Function],
          "fragmentMatcher": HeuristicFragmentMatcher {},
          "storeFactory": [Function],
        },
        "data": ObjectCache {
          "data": Object {},
        },
        "optimistic": Array [],
        "silenceBroadcast": false,
        "watches": Array [
          Object {
            "callback": [Function],
            "optimistic": true,
            "previousResult": [Function],
            "query": Object {
              "definitions": Array [
                Object {
                  "directives": Array [],
                  "kind": "OperationDefinition",
                  "name": undefined,
                  "operation": "query",
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "alias": undefined,
                        "arguments": Array [
                          Object {
                            "kind": "Argument",
                            "name": Object {
                              "kind": "Name",
                              "value": "dayStart",
                            },
                            "value": Object {
                              "block": false,
                              "kind": "StringValue",
                              "value": "Nov 24 2018",
                            },
                          },
                        ],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "dailyDurationsOfMeetings",
                        },
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "MeetingsDurationaAnalytics",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "count",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "roomName",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "totalDuration",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "__typename",
                                    },
                                  },
                                ],
                              },
                            },
                            Object {
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "__typename",
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  "variableDefinitions": Array [],
                },
              ],
              "kind": "Document",
              "loc": Object {
                "end": 178,
                "source": Object {
                  "body": "
 query {
    dailyDurationsOfMeetings(dayStart: \\"Nov 24 2018\\"){
        MeetingsDurationaAnalytics {
            count
            roomName
            totalDuration
    }
 }
}
",
                  "locationOffset": Object {
                    "column": 1,
                    "line": 1,
                  },
                  "name": "GraphQL request",
                },
                "start": 0,
              },
            },
            "variables": undefined,
          },
        ],
      },
      "defaultOptions": Object {},
      "disableNetworkFetches": false,
      "link": ApolloLink {
        "request": [Function],
      },
      "mutate": [Function],
      "query": [Function],
      "queryDeduplication": true,
      "queryManager": QueryManager {
        "dataStore": DataStore {
          "cache": InMemoryCache {
            "addTypename": true,
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "storeFactory": [Function],
            },
            "data": ObjectCache {
              "data": Object {},
            },
            "optimistic": Array [],
            "silenceBroadcast": false,
            "watches": Array [
              Object {
                "callback": [Function],
                "optimistic": true,
                "previousResult": [Function],
                "query": Object {
                  "definitions": Array [
                    Object {
                      "directives": Array [],
                      "kind": "OperationDefinition",
                      "name": undefined,
                      "operation": "query",
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [
                              Object {
                                "kind": "Argument",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "dayStart",
                                },
                                "value": Object {
                                  "block": false,
                                  "kind": "StringValue",
                                  "value": "Nov 24 2018",
                                },
                              },
                            ],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "dailyDurationsOfMeetings",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "MeetingsDurationaAnalytics",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "count",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "roomName",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "totalDuration",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "__typename",
                                        },
                                      },
                                    ],
                                  },
                                },
                                Object {
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "__typename",
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                      "variableDefinitions": Array [],
                    },
                  ],
                  "kind": "Document",
                  "loc": Object {
                    "end": 178,
                    "source": Object {
                      "body": "
 query {
    dailyDurationsOfMeetings(dayStart: \\"Nov 24 2018\\"){
        MeetingsDurationaAnalytics {
            count
            roomName
            totalDuration
    }
 }
}
",
                      "locationOffset": Object {
                        "column": 1,
                        "line": 1,
                      },
                      "name": "GraphQL request",
                    },
                    "start": 0,
                  },
                },
                "variables": undefined,
              },
            ],
          },
        },
        "deduplicator": ApolloLink {
          "request": [Function],
        },
        "fetchQueryPromises": Map {},
        "idCounter": 3,
        "link": ApolloLink {
          "request": [Function],
        },
        "mutationStore": MutationStore {
          "store": Object {},
        },
        "onBroadcast": [Function],
        "queries": Map {
          "1" => Object {
            "cancel": [Function],
            "document": Object {
              "definitions": Array [
                Object {
                  "directives": Array [],
                  "kind": "OperationDefinition",
                  "name": undefined,
                  "operation": "query",
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "alias": undefined,
                        "arguments": Array [
                          Object {
                            "kind": "Argument",
                            "name": Object {
                              "kind": "Name",
                              "value": "dayStart",
                            },
                            "value": Object {
                              "block": false,
                              "kind": "StringValue",
                              "value": "Nov 24 2018",
                            },
                          },
                        ],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "dailyDurationsOfMeetings",
                        },
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "MeetingsDurationaAnalytics",
                              },
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "count",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "roomName",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "totalDuration",
                                    },
                                    "selectionSet": undefined,
                                  },
                                  Object {
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "__typename",
                                    },
                                  },
                                ],
                              },
                            },
                            Object {
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "__typename",
                              },
                            },
                          ],
                        },
                      },
                    ],
                  },
                  "variableDefinitions": Array [],
                },
              ],
              "kind": "Document",
              "loc": Object {
                "end": 178,
                "source": Object {
                  "body": "
 query {
    dailyDurationsOfMeetings(dayStart: \\"Nov 24 2018\\"){
        MeetingsDurationaAnalytics {
            count
            roomName
            totalDuration
    }
 }
}
",
                  "locationOffset": Object {
                    "column": 1,
                    "line": 1,
                  },
                  "name": "GraphQL request",
                },
                "start": 0,
              },
            },
            "invalidate": false,
            "invalidated": false,
            "lastRequestId": 2,
            "listeners": Array [
              [Function],
            ],
            "newData": null,
            "observableQuery": ObservableQuery {
              "_subscriber": [Function],
              "isCurrentlyPolling": false,
              "isTornDown": false,
              "lastError": [Error: Network error: The string did not match the expected pattern.],
              "lastResult": undefined,
              "observers": Array [
                SubscriptionObserver {
                  "_subscription": Subscription {
                    "_cleanup": [Function],
                    "_observer": Object {
                      "error": [Function],
                      "next": [Function],
                    },
                    "_queue": undefined,
                    "_state": "ready",
                  },
                },
              ],
              "options": Object {
                "context": Object {},
                "metadata": Object {
                  "reactComponent": Object {
                    "displayName": "Query",
                  },
                },
                "notifyOnNetworkStatusChange": false,
                "query": Object {
                  "definitions": Array [
                    Object {
                      "directives": Array [],
                      "kind": "OperationDefinition",
                      "name": undefined,
                      "operation": "query",
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [
                              Object {
                                "kind": "Argument",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "dayStart",
                                },
                                "value": Object {
                                  "block": false,
                                  "kind": "StringValue",
                                  "value": "Nov 24 2018",
                                },
                              },
                            ],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "dailyDurationsOfMeetings",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "MeetingsDurationaAnalytics",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "count",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "roomName",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "totalDuration",
                                        },
                                        "selectionSet": undefined,
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                          },
                        ],
                      },
                      "variableDefinitions": Array [],
                    },
                  ],
                  "kind": "Document",
                  "loc": Object {
                    "end": 178,
                    "start": 0,
                  },
                },
              },
              "queryId": "1",
              "queryManager": [Circular],
              "scheduler": QueryScheduler {
                "inFlightQueries": Object {},
                "intervalQueries": Object {},
                "pollingTimers": Object {},
                "queryManager": [Circular],
                "registeredQueries": Object {},
                "ssrMode": false,
              },
              "shouldSubscribe": true,
              "subscriptionHandles": Array [],
              "variables": Object {},
            },
            "subscriptions": Array [],
          },
        },
        "queryDeduplication": true,
        "queryIdsByName": Object {},
        "queryStore": QueryStore {
          "store": Object {
            "1": Object {
              "document": Object {
                "definitions": Array [
                  Object {
                    "directives": Array [],
                    "kind": "OperationDefinition",
                    "name": undefined,
                    "operation": "query",
                    "selectionSet": Object {
                      "kind": "SelectionSet",
                      "selections": Array [
                        Object {
                          "alias": undefined,
                          "arguments": Array [
                            Object {
                              "kind": "Argument",
                              "name": Object {
                                "kind": "Name",
                                "value": "dayStart",
                              },
                              "value": Object {
                                "block": false,
                                "kind": "StringValue",
                                "value": "Nov 24 2018",
                              },
                            },
                          ],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "dailyDurationsOfMeetings",
                          },
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "MeetingsDurationaAnalytics",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "count",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "roomName",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "totalDuration",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "__typename",
                                      },
                                    },
                                  ],
                                },
                              },
                              Object {
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "__typename",
                                },
                              },
                            ],
                          },
                        },
                      ],
                    },
                    "variableDefinitions": Array [],
                  },
                ],
                "kind": "Document",
                "loc": Object {
                  "end": 178,
                  "source": Object {
                    "body": "
 query {
    dailyDurationsOfMeetings(dayStart: \\"Nov 24 2018\\"){
        MeetingsDurationaAnalytics {
            count
            roomName
            totalDuration
    }
 }
}
",
                    "locationOffset": Object {
                      "column": 1,
                      "line": 1,
                    },
                    "name": "GraphQL request",
                  },
                  "start": 0,
                },
              },
              "graphQLErrors": Array [],
              "metadata": Object {
                "reactComponent": Object {
                  "displayName": "Query",
                },
              },
              "networkError": DOMException {
                Symbol(impl): DOMExceptionImpl {
                  "message": "The string did not match the expected pattern.",
                  "name": "SyntaxError",
                  Symbol(wrapper): [Circular],
                },
              },
              "networkStatus": 8,
              "previousVariables": null,
              "variables": Object {},
            },
          },
        },
        "scheduler": QueryScheduler {
          "inFlightQueries": Object {},
          "intervalQueries": Object {},
          "pollingTimers": Object {},
          "queryManager": [Circular],
          "registeredQueries": Object {},
          "ssrMode": false,
        },
      },
      "reFetchObservableQueries": [Function],
      "resetStore": [Function],
      "resetStoreCallbacks": Array [],
      "ssrMode": false,
      "store": DataStore {
        "cache": InMemoryCache {
          "addTypename": true,
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "storeFactory": [Function],
          },
          "data": ObjectCache {
            "data": Object {},
          },
          "optimistic": Array [],
          "silenceBroadcast": false,
          "watches": Array [
            Object {
              "callback": [Function],
              "optimistic": true,
              "previousResult": [Function],
              "query": Object {
                "definitions": Array [
                  Object {
                    "directives": Array [],
                    "kind": "OperationDefinition",
                    "name": undefined,
                    "operation": "query",
                    "selectionSet": Object {
                      "kind": "SelectionSet",
                      "selections": Array [
                        Object {
                          "alias": undefined,
                          "arguments": Array [
                            Object {
                              "kind": "Argument",
                              "name": Object {
                                "kind": "Name",
                                "value": "dayStart",
                              },
                              "value": Object {
                                "block": false,
                                "kind": "StringValue",
                                "value": "Nov 24 2018",
                              },
                            },
                          ],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "dailyDurationsOfMeetings",
                          },
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "MeetingsDurationaAnalytics",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "count",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "roomName",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "totalDuration",
                                      },
                                      "selectionSet": undefined,
                                    },
                                    Object {
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "__typename",
                                      },
                                    },
                                  ],
                                },
                              },
                              Object {
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "__typename",
                                },
                              },
                            ],
                          },
                        },
                      ],
                    },
                    "variableDefinitions": Array [],
                  },
                ],
                "kind": "Document",
                "loc": Object {
                  "end": 178,
                  "source": Object {
                    "body": "
 query {
    dailyDurationsOfMeetings(dayStart: \\"Nov 24 2018\\"){
        MeetingsDurationaAnalytics {
            count
            roomName
            totalDuration
    }
 }
}
",
                    "locationOffset": Object {
                      "column": 1,
                      "line": 1,
                    },
                    "name": "GraphQL request",
                  },
                  "start": 0,
                },
              },
              "variables": undefined,
            },
          ],
        },
      },
      "version": "2.3.1",
      "watchQuery": [Function],
    }
  }
>
  <AnalyticsActivity
    onBlur={[MockFunction]}
    onClick={[MockFunction]}
  >
    <div>
      <div
        className="analytics-cover "
      >
        <div
          className="btn-left"
        >
          <ThemedThemed
            className="activity-btn pad-top analysis-btn btn btn-color"
            composeTheme="deeply"
            disabled={false}
            icon={
              <div
                className="overViewBtn"
              >
                <span
                  id="overview-span"
                >
                  OVERVIEW
                </span>
              </div>
            }
            id="overview-button"
            mapThemrProps={[Function]}
            onClick={[Function]}
            ripple={true}
            rippleCentered={false}
            rippleClassName=""
            rippleMultiple={true}
            rippleSpread={2}
            type="button"
          >
            <ThemedRippledComponent
              className="activity-btn pad-top analysis-btn btn btn-color"
              composeTheme="deeply"
              disabled={false}
              icon={
                <div
                  className="overViewBtn"
                >
                  <span
                    id="overview-span"
                  >
                    OVERVIEW
                  </span>
                </div>
              }
              id="overview-button"
              mapThemrProps={[Function]}
              onClick={[Function]}
              ripple={true}
              rippleCentered={false}
              rippleClassName=""
              rippleMultiple={true}
              rippleSpread={2}
              theme={Object {}}
              type="button"
            >
              <RippledComponent
                className="activity-btn pad-top analysis-btn btn btn-color"
                disabled={false}
                icon={
                  <div
                    className="overViewBtn"
                  >
                    <span
                      id="overview-span"
                    >
                      OVERVIEW
                    </span>
                  </div>
                }
                id="overview-button"
                onClick={[Function]}
                ripple={true}
                rippleCentered={false}
                rippleClassName=""
                rippleMultiple={true}
                rippleSpread={2}
                theme={Object {}}
                type="button"
              >
                <Button
                  accent={false}
                  className="activity-btn pad-top analysis-btn btn btn-color"
                  disabled={false}
                  flat={false}
                  floating={false}
                  icon={
                    <div
                      className="overViewBtn"
                    >
                      <span
                        id="overview-span"
                      >
                        OVERVIEW
                      </span>
                    </div>
                  }
                  id="overview-button"
                  mini={false}
                  neutral={true}
                  onClick={[Function]}
                  onMouseDown={[Function]}
                  onTouchStart={[Function]}
                  primary={false}
                  raised={false}
                  theme={Object {}}
                  type="button"
                >
                  <button
                    className=" activity-btn pad-top analysis-btn btn btn-color"
                    data-react-toolbox="button"
                    disabled={false}
                    id="overview-button"
                    onClick={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchStart={[Function]}
                    type="button"
                  >
                    <FontIcon
                      alt=""
                      className=""
                      value={
                        <div
                          className="overViewBtn"
                        >
                          <span
                            id="overview-span"
                          >
                            OVERVIEW
                          </span>
                        </div>
                      }
                    >
                      <span
                        aria-label=""
                        className=""
                        data-react-toolbox="font-icon"
                      >
                        <div
                          className="overViewBtn"
                        >
                          <span
                            id="overview-span"
                          >
                            OVERVIEW
                          </span>
                        </div>
                      </span>
                    </FontIcon>
                  </button>
                </Button>
              </RippledComponent>
            </ThemedRippledComponent>
          </ThemedThemed>
          <ThemedThemed
            className="overview-btn  analysis-btn btn "
            composeTheme="deeply"
            disabled={false}
            icon={
              <div
                className="activityIconBtn"
              >
                <span
                  id="activity-span"
                >
                  ACTIVITY
                </span>
              </div>
            }
            mapThemrProps={[Function]}
            onClick={[Function]}
            ripple={true}
            rippleCentered={false}
            rippleClassName=""
            rippleMultiple={true}
            rippleSpread={2}
          >
            <ThemedRippledComponent
              className="overview-btn  analysis-btn btn "
              composeTheme="deeply"
              disabled={false}
              icon={
                <div
                  className="activityIconBtn"
                >
                  <span
                    id="activity-span"
                  >
                    ACTIVITY
                  </span>
                </div>
              }
              mapThemrProps={[Function]}
              onClick={[Function]}
              ripple={true}
              rippleCentered={false}
              rippleClassName=""
              rippleMultiple={true}
              rippleSpread={2}
              theme={Object {}}
            >
              <RippledComponent
                className="overview-btn  analysis-btn btn "
                disabled={false}
                icon={
                  <div
                    className="activityIconBtn"
                  >
                    <span
                      id="activity-span"
                    >
                      ACTIVITY
                    </span>
                  </div>
                }
                onClick={[Function]}
                ripple={true}
                rippleCentered={false}
                rippleClassName=""
                rippleMultiple={true}
                rippleSpread={2}
                theme={Object {}}
              >
                <Button
                  accent={false}
                  className="overview-btn  analysis-btn btn "
                  disabled={false}
                  flat={false}
                  floating={false}
                  icon={
                    <div
                      className="activityIconBtn"
                    >
                      <span
                        id="activity-span"
                      >
                        ACTIVITY
                      </span>
                    </div>
                  }
                  mini={false}
                  neutral={true}
                  onClick={[Function]}
                  onMouseDown={[Function]}
                  onTouchStart={[Function]}
                  primary={false}
                  raised={false}
                  theme={Object {}}
                  type="button"
                >
                  <button
                    className=" overview-btn  analysis-btn btn "
                    data-react-toolbox="button"
                    disabled={false}
                    onClick={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchStart={[Function]}
                    type="button"
                  >
                    <FontIcon
                      alt=""
                      className=""
                      value={
                        <div
                          className="activityIconBtn"
                        >
                          <span
                            id="activity-span"
                          >
                            ACTIVITY
                          </span>
                        </div>
                      }
                    >
                      <span
                        aria-label=""
                        className=""
                        data-react-toolbox="font-icon"
                      >
                        <div
                          className="activityIconBtn"
                        >
                          <span
                            id="activity-span"
                          >
                            ACTIVITY
                          </span>
                        </div>
                      </span>
                    </FontIcon>
                  </button>
                </Button>
              </RippledComponent>
            </ThemedRippledComponent>
          </ThemedThemed>
        </div>
        <div
          className="btn-right"
        >
          <ThemedThemed
            className="location-btn analysis-btn "
            composeTheme="deeply"
            disabled={false}
            icon={
              <div
                className="locationIconBtn"
              >
                <span>
                  Nairobi
                </span>
              </div>
            }
            id="location-btn"
            mapThemrProps={[Function]}
            ripple={true}
            rippleCentered={false}
            rippleClassName=""
            rippleMultiple={true}
            rippleSpread={2}
          >
            <ThemedRippledComponent
              className="location-btn analysis-btn "
              composeTheme="deeply"
              disabled={false}
              icon={
                <div
                  className="locationIconBtn"
                >
                  <span>
                    Nairobi
                  </span>
                </div>
              }
              id="location-btn"
              mapThemrProps={[Function]}
              ripple={true}
              rippleCentered={false}
              rippleClassName=""
              rippleMultiple={true}
              rippleSpread={2}
              theme={Object {}}
            >
              <RippledComponent
                className="location-btn analysis-btn "
                disabled={false}
                icon={
                  <div
                    className="locationIconBtn"
                  >
                    <span>
                      Nairobi
                    </span>
                  </div>
                }
                id="location-btn"
                ripple={true}
                rippleCentered={false}
                rippleClassName=""
                rippleMultiple={true}
                rippleSpread={2}
                theme={Object {}}
              >
                <Button
                  accent={false}
                  className="location-btn analysis-btn "
                  disabled={false}
                  flat={false}
                  floating={false}
                  icon={
                    <div
                      className="locationIconBtn"
                    >
                      <span>
                        Nairobi
                      </span>
                    </div>
                  }
                  id="location-btn"
                  mini={false}
                  neutral={true}
                  onMouseDown={[Function]}
                  onTouchStart={[Function]}
                  primary={false}
                  raised={false}
                  theme={Object {}}
                  type="button"
                >
                  <button
                    className=" location-btn analysis-btn "
                    data-react-toolbox="button"
                    disabled={false}
                    id="location-btn"
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchStart={[Function]}
                    type="button"
                  >
                    <FontIcon
                      alt=""
                      className=""
                      value={
                        <div
                          className="locationIconBtn"
                        >
                          <span>
                            Nairobi
                          </span>
                        </div>
                      }
                    >
                      <span
                        aria-label=""
                        className=""
                        data-react-toolbox="font-icon"
                      >
                        <div
                          className="locationIconBtn"
                        >
                          <span>
                            Nairobi
                          </span>
                        </div>
                      </span>
                    </FontIcon>
                  </button>
                </Button>
              </RippledComponent>
            </ThemedRippledComponent>
          </ThemedThemed>
          <ThemedIconMenu
            className="calendar-btn analysis-btn "
            composeTheme="deeply"
            icon={
              <div
                className="calendarIconBtn"
              >
                <span>
                  Today
                </span>
              </div>
            }
            iconRipple={true}
            id="calendar-btn"
            mapThemrProps={[Function]}
            menuRipple={true}
            position="auto"
            selectable={false}
            type="button"
          >
            <IconMenu
              className="calendar-btn analysis-btn "
              icon={
                <div
                  className="calendarIconBtn"
                >
                  <span>
                    Today
                  </span>
                </div>
              }
              iconRipple={true}
              id="calendar-btn"
              menuRipple={true}
              position="auto"
              selectable={false}
              theme={Object {}}
              type="button"
            >
              <div
                className="calendar-btn analysis-btn "
                id="calendar-btn"
                type="button"
              >
                <ThemedThemed
                  composeTheme="deeply"
                  disabled={false}
                  icon={
                    <div
                      className="calendarIconBtn"
                    >
                      <span>
                        Today
                      </span>
                    </div>
                  }
                  mapThemrProps={[Function]}
                  onClick={[Function]}
                  ripple={true}
                  rippleCentered={true}
                  rippleClassName=""
                  rippleMultiple={true}
                  rippleSpread={2}
                >
                  <ThemedRippledComponent
                    composeTheme="deeply"
                    disabled={false}
                    icon={
                      <div
                        className="calendarIconBtn"
                      >
                        <span>
                          Today
                        </span>
                      </div>
                    }
                    mapThemrProps={[Function]}
                    onClick={[Function]}
                    ripple={true}
                    rippleCentered={true}
                    rippleClassName=""
                    rippleMultiple={true}
                    rippleSpread={2}
                    theme={Object {}}
                  >
                    <RippledComponent
                      disabled={false}
                      icon={
                        <div
                          className="calendarIconBtn"
                        >
                          <span>
                            Today
                          </span>
                        </div>
                      }
                      onClick={[Function]}
                      ripple={true}
                      rippleCentered={true}
                      rippleClassName=""
                      rippleMultiple={true}
                      rippleSpread={2}
                      theme={Object {}}
                    >
                      <IconButton
                        accent={false}
                        className=""
                        disabled={false}
                        icon={
                          <div
                            className="calendarIconBtn"
                          >
                            <span>
                              Today
                            </span>
                          </div>
                        }
                        neutral={true}
                        onClick={[Function]}
                        onMouseDown={[Function]}
                        onTouchStart={[Function]}
                        primary={false}
                        theme={Object {}}
                        type="button"
                      >
                        <button
                          className=""
                          data-react-toolbox="button"
                          disabled={false}
                          onClick={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchStart={[Function]}
                          type="button"
                        >
                          <div
                            className="calendarIconBtn"
                          >
                            <span>
                              Today
                            </span>
                          </div>
                        </button>
                      </IconButton>
                    </RippledComponent>
                  </ThemedRippledComponent>
                </ThemedThemed>
                <ThemedMenu
                  active={false}
                  composeTheme="deeply"
                  mapThemrProps={[Function]}
                  onHide={[Function]}
                  outline={true}
                  position="auto"
                  ripple={true}
                  selectable={false}
                  theme={Object {}}
                >
                  <Menu
                    active={false}
                    onHide={[Function]}
                    outline={true}
                    position="auto"
                    ripple={true}
                    selectable={false}
                    theme={Object {}}
                  >
                    <div
                      className=""
                      data-react-toolbox="menu"
                      style={
                        Object {
                          "height": undefined,
                          "width": undefined,
                        }
                      }
                    >
                      <div
                        style={
                          Object {
                            "height": undefined,
                            "width": undefined,
                          }
                        }
                      />
                      <ul>
                        <ThemedRadioGroup
                          className="radio-wrapper"
                          composeTheme="deeply"
                          disabled={false}
                          key=".0"
                          mapThemrProps={[Function]}
                          onChange={[Function]}
                          value="Today"
                        >
                          <RadioGroup
                            className="radio-wrapper"
                            disabled={false}
                            onChange={[Function]}
                            theme={Object {}}
                            value="Today"
                          >
                            <div
                              className="radio-wrapper"
                              data-react-toolbox="radio-group"
                            >
                              <div
                                className="date-label"
                                key=".0"
                              >
                                Date options
                              </div>
                              <ThemedRadioButton
                                checked={true}
                                className=""
                                composeTheme="deeply"
                                disabled={false}
                                key=".1"
                                label="Today"
                                mapThemrProps={[Function]}
                                onChange={[Function]}
                                value="Today"
                              >
                                <RadioButton
                                  checked={true}
                                  className=""
                                  disabled={false}
                                  label="Today"
                                  onChange={[Function]}
                                  theme={Object {}}
                                  value="Today"
                                >
                                  <label
                                    className=""
                                    data-react-toolbox="radio-button"
                                  >
                                    <input
                                      checked={true}
                                      disabled={false}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      type="radio"
                                      value="Today"
                                    />
                                    <ThemedRippledComponent
                                      checked={true}
                                      composeTheme="deeply"
                                      disabled={false}
                                      mapThemrProps={[Function]}
                                      ripple={true}
                                      rippleCentered={true}
                                      rippleClassName=""
                                      rippleMultiple={true}
                                      rippleSpread={2.6}
                                      theme={Object {}}
                                    >
                                      <RippledComponent
                                        checked={true}
                                        disabled={false}
                                        ripple={true}
                                        rippleCentered={true}
                                        rippleClassName=""
                                        rippleMultiple={true}
                                        rippleSpread={2.6}
                                        theme={Object {}}
                                      >
                                        <Radio
                                          checked={true}
                                          disabled={false}
                                          onMouseDown={[Function]}
                                          onTouchStart={[Function]}
                                          theme={Object {}}
                                        >
                                          <div
                                            data-react-toolbox="radio"
                                            disabled={false}
                                            onMouseDown={[Function]}
                                            onTouchStart={[Function]}
                                          />
                                        </Radio>
                                      </RippledComponent>
                                    </ThemedRippledComponent>
                                    <span>
                                      Today
                                    </span>
                                  </label>
                                </RadioButton>
                              </ThemedRadioButton>
                              <ThemedRadioButton
                                checked={false}
                                className=""
                                composeTheme="deeply"
                                disabled={false}
                                key=".2"
                                label="Tomorrow"
                                mapThemrProps={[Function]}
                                onChange={[Function]}
                                value="Tomorrow"
                              >
                                <RadioButton
                                  checked={false}
                                  className=""
                                  disabled={false}
                                  label="Tomorrow"
                                  onChange={[Function]}
                                  theme={Object {}}
                                  value="Tomorrow"
                                >
                                  <label
                                    className=""
                                    data-react-toolbox="radio-button"
                                  >
                                    <input
                                      checked={false}
                                      disabled={false}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      type="radio"
                                      value="Tomorrow"
                                    />
                                    <ThemedRippledComponent
                                      checked={false}
                                      composeTheme="deeply"
                                      disabled={false}
                                      mapThemrProps={[Function]}
                                      ripple={true}
                                      rippleCentered={true}
                                      rippleClassName=""
                                      rippleMultiple={true}
                                      rippleSpread={2.6}
                                      theme={Object {}}
                                    >
                                      <RippledComponent
                                        checked={false}
                                        disabled={false}
                                        ripple={true}
                                        rippleCentered={true}
                                        rippleClassName=""
                                        rippleMultiple={true}
                                        rippleSpread={2.6}
                                        theme={Object {}}
                                      >
                                        <Radio
                                          checked={false}
                                          disabled={false}
                                          onMouseDown={[Function]}
                                          onTouchStart={[Function]}
                                          theme={Object {}}
                                        >
                                          <div
                                            data-react-toolbox="radio"
                                            disabled={false}
                                            onMouseDown={[Function]}
                                            onTouchStart={[Function]}
                                          />
                                        </Radio>
                                      </RippledComponent>
                                    </ThemedRippledComponent>
                                    <span>
                                      Tomorrow
                                    </span>
                                  </label>
                                </RadioButton>
                              </ThemedRadioButton>
                              <ThemedRadioButton
                                checked={false}
                                className="radioGroup-test1"
                                composeTheme="deeply"
                                disabled={false}
                                key=".3"
                                label="This Week"
                                mapThemrProps={[Function]}
                                onChange={[Function]}
                                value="This Week"
                              >
                                <RadioButton
                                  checked={false}
                                  className="radioGroup-test1"
                                  disabled={false}
                                  label="This Week"
                                  onChange={[Function]}
                                  theme={Object {}}
                                  value="This Week"
                                >
                                  <label
                                    className="radioGroup-test1"
                                    data-react-toolbox="radio-button"
                                  >
                                    <input
                                      checked={false}
                                      disabled={false}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      type="radio"
                                      value="This Week"
                                    />
                                    <ThemedRippledComponent
                                      checked={false}
                                      composeTheme="deeply"
                                      disabled={false}
                                      mapThemrProps={[Function]}
                                      ripple={true}
                                      rippleCentered={true}
                                      rippleClassName=""
                                      rippleMultiple={true}
                                      rippleSpread={2.6}
                                      theme={Object {}}
                                    >
                                      <RippledComponent
                                        checked={false}
                                        disabled={false}
                                        ripple={true}
                                        rippleCentered={true}
                                        rippleClassName=""
                                        rippleMultiple={true}
                                        rippleSpread={2.6}
                                        theme={Object {}}
                                      >
                                        <Radio
                                          checked={false}
                                          disabled={false}
                                          onMouseDown={[Function]}
                                          onTouchStart={[Function]}
                                          theme={Object {}}
                                        >
                                          <div
                                            data-react-toolbox="radio"
                                            disabled={false}
                                            onMouseDown={[Function]}
                                            onTouchStart={[Function]}
                                          />
                                        </Radio>
                                      </RippledComponent>
                                    </ThemedRippledComponent>
                                    <span>
                                      This Week
                                    </span>
                                  </label>
                                </RadioButton>
                              </ThemedRadioButton>
                              <ThemedRadioButton
                                checked={false}
                                className=""
                                composeTheme="deeply"
                                disabled={false}
                                key=".4"
                                label="This Month"
                                mapThemrProps={[Function]}
                                onChange={[Function]}
                                value="This Month"
                              >
                                <RadioButton
                                  checked={false}
                                  className=""
                                  disabled={false}
                                  label="This Month"
                                  onChange={[Function]}
                                  theme={Object {}}
                                  value="This Month"
                                >
                                  <label
                                    className=""
                                    data-react-toolbox="radio-button"
                                  >
                                    <input
                                      checked={false}
                                      disabled={false}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      type="radio"
                                      value="This Month"
                                    />
                                    <ThemedRippledComponent
                                      checked={false}
                                      composeTheme="deeply"
                                      disabled={false}
                                      mapThemrProps={[Function]}
                                      ripple={true}
                                      rippleCentered={true}
                                      rippleClassName=""
                                      rippleMultiple={true}
                                      rippleSpread={2.6}
                                      theme={Object {}}
                                    >
                                      <RippledComponent
                                        checked={false}
                                        disabled={false}
                                        ripple={true}
                                        rippleCentered={true}
                                        rippleClassName=""
                                        rippleMultiple={true}
                                        rippleSpread={2.6}
                                        theme={Object {}}
                                      >
                                        <Radio
                                          checked={false}
                                          disabled={false}
                                          onMouseDown={[Function]}
                                          onTouchStart={[Function]}
                                          theme={Object {}}
                                        >
                                          <div
                                            data-react-toolbox="radio"
                                            disabled={false}
                                            onMouseDown={[Function]}
                                            onTouchStart={[Function]}
                                          />
                                        </Radio>
                                      </RippledComponent>
                                    </ThemedRippledComponent>
                                    <span>
                                      This Month
                                    </span>
                                  </label>
                                </RadioButton>
                              </ThemedRadioButton>
                              <ThemedRadioButton
                                checked={false}
                                className=""
                                composeTheme="deeply"
                                disabled={false}
                                key=".5"
                                label="Pick a Date"
                                mapThemrProps={[Function]}
                                onChange={[Function]}
                                value="Pick Date"
                              >
                                <RadioButton
                                  checked={false}
                                  className=""
                                  disabled={false}
                                  label="Pick a Date"
                                  onChange={[Function]}
                                  theme={Object {}}
                                  value="Pick Date"
                                >
                                  <label
                                    className=""
                                    data-react-toolbox="radio-button"
                                  >
                                    <input
                                      checked={false}
                                      disabled={false}
                                      onChange={[Function]}
                                      onClick={[Function]}
                                      type="radio"
                                      value="Pick Date"
                                    />
                                    <ThemedRippledComponent
                                      checked={false}
                                      composeTheme="deeply"
                                      disabled={false}
                                      mapThemrProps={[Function]}
                                      ripple={true}
                                      rippleCentered={true}
                                      rippleClassName=""
                                      rippleMultiple={true}
                                      rippleSpread={2.6}
                                      theme={Object {}}
                                    >
                                      <RippledComponent
                                        checked={false}
                                        disabled={false}
                                        ripple={true}
                                        rippleCentered={true}
                                        rippleClassName=""
                                        rippleMultiple={true}
                                        rippleSpread={2.6}
                                        theme={Object {}}
                                      >
                                        <Radio
                                          checked={false}
                                          disabled={false}
                                          onMouseDown={[Function]}
                                          onTouchStart={[Function]}
                                          theme={Object {}}
                                        >
                                          <div
                                            data-react-toolbox="radio"
                                            disabled={false}
                                            onMouseDown={[Function]}
                                            onTouchStart={[Function]}
                                          />
                                        </Radio>
                                      </RippledComponent>
                                    </ThemedRippledComponent>
                                    <span>
                                      Pick a Date
                                    </span>
                                  </label>
                                </RadioButton>
                              </ThemedRadioButton>
                            </div>
                          </RadioGroup>
                        </ThemedRadioGroup>
                      </ul>
                    </div>
                  </Menu>
                </ThemedMenu>
              </div>
            </IconMenu>
          </ThemedIconMenu>
          <div
            className="dropdown"
          >
            <button
              className="dropbtn"
              id="btnControl"
              onBlur={[Function]}
              onClick={[Function]}
            >
              <img
                alt="download icon"
                className="dropbtn-img"
                src="test-file-stub"
              />
            </button>
            <div
              className="dropdown-content-null"
            >
              <a
                className="download-dropdown-label"
                disabled={true}
                href="/"
              >
                Export options 
              </a>
              <a
                href="/analytics"
              >
                PDF
              </a>
              <a
                href="/analytics"
              >
                JPEG
              </a>
              <a
                href="/analytics"
              >
                CSV
              </a>
            </div>
          </div>
        </div>
      </div>
      <AnalyticsOverview
        dateValue="Today"
      >
        <AveragePieChartList>
          <div
            className="pie-chart-container"
          >
            <MeetingDurationPieChart>
              <article
                className="pie-chart"
              >
                <section
                  className="chart-header"
                >
                  <p
                    className="chart-title"
                  >
                    Average Meeting Duration
                  </p>
                  <img
                    alt="help icon"
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    src="test-file-stub"
                  />
                </section>
                <section
                  className="chart-content"
                >
                  <img
                    alt="average meeting chart"
                    src="test-file-stub"
                  />
                  <section
                    className="chart-details"
                  >
                    <p
                      className="duration-first-circle"
                    >
                      <span />
                      60 Minutes
                    </p>
                    <p
                      className="duration-second-circle"
                    >
                      <span />
                      45 Minutes
                    </p>
                    <p
                      className="duration-third-circle"
                    >
                      <span />
                      30 Minutes
                    </p>
                  </section>
                </section>
              </article>
            </MeetingDurationPieChart>
            <RoomCapacityPieChart>
              <article
                className="pie-chart"
              >
                <section
                  className="chart-header"
                >
                  <p
                    className="chart-title"
                  >
                    Average Room Capacity
                  </p>
                  <img
                    alt="help icon"
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    src="test-file-stub"
                  />
                </section>
                <section
                  className="chart-content"
                >
                  <img
                    alt="average meeting chart"
                    src="test-file-stub"
                  />
                  <section
                    className="chart-details"
                  >
                    <p
                      className="room-capacity-first-circle"
                    >
                      <span />
                      Less than 10
                    </p>
                    <p
                      className="room-capacity-second-circle"
                    >
                      <span />
                      10 - 20
                    </p>
                    <p
                      className="room-capacity-third-circle"
                    >
                      <span />
                      More than 20
                    </p>
                  </section>
                </section>
              </article>
            </RoomCapacityPieChart>
            <AttendeesPieChart>
              <article
                className="pie-chart"
              >
                <section
                  className="chart-header"
                >
                  <p
                    className="chart-title"
                  >
                    Average No. of Attendees/ Meeting
                  </p>
                  <img
                    alt="help icon"
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    src="test-file-stub"
                  />
                </section>
                <section
                  className="chart-content"
                >
                  <img
                    alt="average meeting chart"
                    src="test-file-stub"
                  />
                  <section
                    className="chart-details"
                  >
                    <p
                      className="attendees-first-circle"
                    >
                      <span />
                      130 (Yes)
                    </p>
                    <p
                      className="attendees-second-circle"
                    >
                      <span />
                      20 (Maybe)
                    </p>
                    <p
                      className="attendees-third-circle"
                    >
                      <span />
                      6 (No)
                    </p>
                  </section>
                </section>
              </article>
            </AttendeesPieChart>
          </div>
        </AveragePieChartList>
        <ComposedBookedRooms
          dateValue="Today"
        >
          <div
            className="wrap-composed-rooms"
          >
            <div>
              <ComposedBooked
                bookedRoomText="Most Booked Rooms"
                component={[Function]}
                dateValue="Today"
              >
                <BookedRooms
                  bookedRoomText="Most Booked Rooms"
                  bookedRoomsList={Array []}
                  fetching={true}
                  moreIcon="test-file-stub"
                  pollIcon="test-file-stub"
                >
                  <div
                    className="wrap-booked-room"
                  >
                    <div
                      className="booked-room-header"
                    >
                      <img
                        alt="Pull"
                        src="test-file-stub"
                      />
                      <h4>
                        Most Booked Rooms
                      </h4>
                      <img
                        alt="More"
                        className=""
                        src="test-file-stub"
                      />
                    </div>
                    <div
                      className="booked-room-list"
                    >
                      <table>
                        <TableHead
                          titles={
                            Array [
                              "Room",
                              "Meetings",
                              "% Share of All Meetings",
                            ]
                          }
                        >
                          <thead>
                            <tr>
                              <th
                                key="Room"
                              >
                                Room
                              </th>
                              <th
                                key="Meetings"
                              >
                                Meetings
                              </th>
                              <th
                                key="% Share of All Meetings"
                              >
                                % Share of All Meetings
                              </th>
                            </tr>
                          </thead>
                        </TableHead>
                        <tbody>
                          <tr>
                            <td
                              colSpan="3"
                            >
                              <ThemedProgressBar
                                buffer={0}
                                className=""
                                composeTheme="deeply"
                                mapThemrProps={[Function]}
                                max={100}
                                min={0}
                                mode="indeterminate"
                                multicolor={false}
                                type="linear"
                                value={0}
                              >
                                <ProgressBar
                                  buffer={0}
                                  className=""
                                  max={100}
                                  min={0}
                                  mode="indeterminate"
                                  multicolor={false}
                                  theme={Object {}}
                                  type="linear"
                                  value={0}
                                >
                                  <div
                                    aria-valuemax={100}
                                    aria-valuemin={0}
                                    aria-valuenow={0}
                                    className=""
                                    data-react-toolbox="progress-bar"
                                  >
                                    <div>
                                      <span
                                        data-ref="buffer"
                                      />
                                      <span
                                        data-ref="value"
                                      />
                                    </div>
                                  </div>
                                </ProgressBar>
                              </ThemedProgressBar>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </BookedRooms>
              </ComposedBooked>
            </div>
            <div
              id="booked-room-margin"
            >
              <ComposedBooked
                bookedRoomText="Least Booked Rooms"
                component={[Function]}
                dateValue="Today"
              >
                <BookedRooms
                  bookedRoomText="Least Booked Rooms"
                  bookedRoomsList={Array []}
                  fetching={true}
                  moreIcon="test-file-stub"
                  pollIcon="test-file-stub"
                >
                  <div
                    className="wrap-booked-room"
                  >
                    <div
                      className="booked-room-header"
                    >
                      <img
                        alt="Pull"
                        src="test-file-stub"
                      />
                      <h4>
                        Least Booked Rooms
                      </h4>
                      <img
                        alt="More"
                        className=""
                        src="test-file-stub"
                      />
                    </div>
                    <div
                      className="booked-room-list"
                    >
                      <table>
                        <TableHead
                          titles={
                            Array [
                              "Room",
                              "Meetings",
                              "% Share of All Meetings",
                            ]
                          }
                        >
                          <thead>
                            <tr>
                              <th
                                key="Room"
                              >
                                Room
                              </th>
                              <th
                                key="Meetings"
                              >
                                Meetings
                              </th>
                              <th
                                key="% Share of All Meetings"
                              >
                                % Share of All Meetings
                              </th>
                            </tr>
                          </thead>
                        </TableHead>
                        <tbody>
                          <tr>
                            <td
                              colSpan="3"
                            >
                              <ThemedProgressBar
                                buffer={0}
                                className=""
                                composeTheme="deeply"
                                mapThemrProps={[Function]}
                                max={100}
                                min={0}
                                mode="indeterminate"
                                multicolor={false}
                                type="linear"
                                value={0}
                              >
                                <ProgressBar
                                  buffer={0}
                                  className=""
                                  max={100}
                                  min={0}
                                  mode="indeterminate"
                                  multicolor={false}
                                  theme={Object {}}
                                  type="linear"
                                  value={0}
                                >
                                  <div
                                    aria-valuemax={100}
                                    aria-valuemin={0}
                                    aria-valuenow={0}
                                    className=""
                                    data-react-toolbox="progress-bar"
                                  >
                                    <div>
                                      <span
                                        data-ref="buffer"
                                      />
                                      <span
                                        data-ref="value"
                                      />
                                    </div>
                                  </div>
                                </ProgressBar>
                              </ThemedProgressBar>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </BookedRooms>
              </ComposedBooked>
            </div>
          </div>
        </ComposedBookedRooms>
        <Checkins>
          <div
            className="checkins"
          >
            <DonutChart
              chartSvg="test-file-stub"
              chartTitle="% of Checkins"
              entries={15}
              hasInfo={true}
              hintText="% of Checkins pie chart"
              percentage={75}
              total={20}
            >
              <div
                className="donut-chart"
              >
                <div
                  className="chart-header"
                >
                  <p>
                    % of Checkins
                  </p>
                  <div
                    className="hint"
                  >
                    <img
                      alt="help icon"
                      src="test-file-stub"
                    />
                    <div
                      className="hint-text"
                    >
                      <p>
                        % of Checkins pie chart
                      </p>
                    </div>
                  </div>
                </div>
                <div
                  className="chart-content"
                >
                  <div
                    className="chart diagram"
                  >
                    <img
                      alt="chart-svg"
                      src="test-file-stub"
                    />
                    <p>
                      75
                      %
                    </p>
                  </div>
                  <div
                    className="chart text"
                  >
                    <p>
                      15
                      /
                      20
                    </p>
                    <p>
                      Meeting
                    </p>
                  </div>
                </div>
              </div>
            </DonutChart>
            <DonutChart
              chartSvg="test-file-stub"
              chartTitle="% of App Bookings"
              entries={4}
              hasInfo={true}
              hintText="% of App Bookings pie chart"
              percentage={20}
              total={20}
            >
              <div
                className="donut-chart"
              >
                <div
                  className="chart-header"
                >
                  <p>
                    % of App Bookings
                  </p>
                  <div
                    className="hint"
                  >
                    <img
                      alt="help icon"
                      src="test-file-stub"
                    />
                    <div
                      className="hint-text"
                    >
                      <p>
                        % of App Bookings pie chart
                      </p>
                    </div>
                  </div>
                </div>
                <div
                  className="chart-content"
                >
                  <div
                    className="chart diagram"
                  >
                    <img
                      alt="chart-svg"
                      src="test-file-stub"
                    />
                    <p>
                      20
                      %
                    </p>
                  </div>
                  <div
                    className="chart text"
                  >
                    <p>
                      4
                      /
                      20
                    </p>
                    <p>
                      Meeting
                    </p>
                  </div>
                </div>
              </div>
            </DonutChart>
            <DonutChart
              chartSvg="test-file-stub"
              chartTitle="% of Auto Cancellations"
              entries={16}
              hasInfo={false}
              hintText="% of Auto Cancellations pie chart"
              percentage={80}
              total={20}
            >
              <div
                className="donut-chart"
              >
                <div
                  className="chart-header"
                >
                  <p>
                    % of Auto Cancellations
                  </p>
                  <div
                    className="hint"
                  >
                    <img
                      alt="help icon"
                      src="test-file-stub"
                    />
                    <div
                      className="hint-text"
                    >
                      <p>
                        % of Auto Cancellations pie chart
                      </p>
                    </div>
                  </div>
                </div>
                <div
                  className="chart-content"
                >
                  <div
                    className="chart diagram"
                  >
                    <img
                      alt="chart-svg"
                      src="test-file-stub"
                    />
                    <p>
                      80
                      %
                    </p>
                  </div>
                </div>
              </div>
            </DonutChart>
          </div>
        </Checkins>
        <AverageMeetingList
          dateValue="Today"
        >
          <div
            className="average-meeting"
          >
            <div
              className="average-meeting-control"
            >
              <h4
                className="header-title"
              >
                Average time spent/Meeting Room
              </h4>
              <span
                className="moreVerticalIcon"
              />
            </div>
            <div
              className="average-meeting-list"
            >
              <table>
                <TableHead
                  titles={
                    Array [
                      "Room",
                      "No. of meetings",
                      "Average Meeting Duration",
                    ]
                  }
                >
                  <thead>
                    <tr>
                      <th
                        key="Room"
                      >
                        Room
                      </th>
                      <th
                        key="No. of meetings"
                      >
                        No. of meetings
                      </th>
                      <th
                        key="Average Meeting Duration"
                      >
                        Average Meeting Duration
                      </th>
                    </tr>
                  </thead>
                </TableHead>
                <tbody>
                  <QueryAnalyticsPerDay>
                    <Query
                      query={
                        Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": undefined,
                              "operation": "query",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [
                                      Object {
                                        "kind": "Argument",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "dayStart",
                                        },
                                        "value": Object {
                                          "block": false,
                                          "kind": "StringValue",
                                          "value": "Nov 24 2018",
                                        },
                                      },
                                    ],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "dailyDurationsOfMeetings",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "MeetingsDurationaAnalytics",
                                          },
                                          "selectionSet": Object {
                                            "kind": "SelectionSet",
                                            "selections": Array [
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "count",
                                                },
                                                "selectionSet": undefined,
                                              },
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "roomName",
                                                },
                                                "selectionSet": undefined,
                                              },
                                              Object {
                                                "alias": undefined,
                                                "arguments": Array [],
                                                "directives": Array [],
                                                "kind": "Field",
                                                "name": Object {
                                                  "kind": "Name",
                                                  "value": "totalDuration",
                                                },
                                                "selectionSet": undefined,
                                              },
                                            ],
                                          },
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 178,
                            "start": 0,
                          },
                        }
                      }
                    >
                      <tr>
                        <th
                          colSpan="3"
                        >
                          <ThemedProgressBar
                            buffer={0}
                            className=""
                            composeTheme="deeply"
                            mapThemrProps={[Function]}
                            max={100}
                            min={0}
                            mode="indeterminate"
                            multicolor={false}
                            type="linear"
                            value={0}
                          >
                            <ProgressBar
                              buffer={0}
                              className=""
                              max={100}
                              min={0}
                              mode="indeterminate"
                              multicolor={false}
                              theme={Object {}}
                              type="linear"
                              value={0}
                            >
                              <div
                                aria-valuemax={100}
                                aria-valuemin={0}
                                aria-valuenow={0}
                                className=""
                                data-react-toolbox="progress-bar"
                              >
                                <div>
                                  <span
                                    data-ref="buffer"
                                  />
                                  <span
                                    data-ref="value"
                                  />
                                </div>
                              </div>
                            </ProgressBar>
                          </ThemedProgressBar>
                        </th>
                      </tr>
                    </Query>
                  </QueryAnalyticsPerDay>
                </tbody>
              </table>
            </div>
            <div
              className="average-meeting-pagination"
            >
              <QueryAnalyticsPerDailyPagination>
                <Pagination
                  handleData={[Function]}
                  hasNext={true}
                  hasPrevious={false}
                  itemsPerPage={
                    Array [
                      5,
                      10,
                      20,
                      50,
                    ]
                  }
                  reverse={true}
                  totalPages={50}
                >
                  <nav
                    className="page-navigation"
                  >
                    <div
                      className="perPageBlock"
                    >
                      <ul
                        className="pagination"
                      >
                        <select
                          className="page-select"
                          name="perPage"
                          onChange={[Function]}
                          value={5}
                        >
                          <option
                            key="6"
                          >
                            5
                          </option>
                          <option
                            key="11"
                          >
                            10
                          </option>
                          <option
                            key="21"
                          >
                            20
                          </option>
                          <option
                            key="51"
                          >
                            50
                          </option>
                        </select>
                        <li>
                          Items per page
                        </li>
                      </ul>
                    </div>
                    <div
                      className="showingBlock"
                    >
                      <ul
                        className="pagination"
                      >
                        <li>
                          <button
                            className="disabled"
                            id="previous"
                            onClick={[Function]}
                          >
                            Previous
                          </button>
                        </li>
                        <li
                          className="results"
                        >
                          <ul>
                            <span>
                              Showing 
                            </span>
                            <select
                              className="totalPage"
                              name="page"
                              onChange={[Function]}
                              value={1}
                            >
                              <option
                                key="0"
                              >
                                1
                              </option>
                              <option
                                key="1"
                              >
                                2
                              </option>
                              <option
                                key="2"
                              >
                                3
                              </option>
                              <option
                                key="3"
                              >
                                4
                              </option>
                              <option
                                key="4"
                              >
                                5
                              </option>
                              <option
                                key="5"
                              >
                                6
                              </option>
                              <option
                                key="6"
                              >
                                7
                              </option>
                              <option
                                key="7"
                              >
                                8
                              </option>
                              <option
                                key="8"
                              >
                                9
                              </option>
                              <option
                                key="9"
                              >
                                10
                              </option>
                              <option
                                key="10"
                              >
                                11
                              </option>
                              <option
                                key="11"
                              >
                                12
                              </option>
                              <option
                                key="12"
                              >
                                13
                              </option>
                              <option
                                key="13"
                              >
                                14
                              </option>
                              <option
                                key="14"
                              >
                                15
                              </option>
                              <option
                                key="15"
                              >
                                16
                              </option>
                              <option
                                key="16"
                              >
                                17
                              </option>
                              <option
                                key="17"
                              >
                                18
                              </option>
                              <option
                                key="18"
                              >
                                19
                              </option>
                              <option
                                key="19"
                              >
                                20
                              </option>
                              <option
                                key="20"
                              >
                                21
                              </option>
                              <option
                                key="21"
                              >
                                22
                              </option>
                              <option
                                key="22"
                              >
                                23
                              </option>
                              <option
                                key="23"
                              >
                                24
                              </option>
                              <option
                                key="24"
                              >
                                25
                              </option>
                              <option
                                key="25"
                              >
                                26
                              </option>
                              <option
                                key="26"
                              >
                                27
                              </option>
                              <option
                                key="27"
                              >
                                28
                              </option>
                              <option
                                key="28"
                              >
                                29
                              </option>
                              <option
                                key="29"
                              >
                                30
                              </option>
                              <option
                                key="30"
                              >
                                31
                              </option>
                              <option
                                key="31"
                              >
                                32
                              </option>
                              <option
                                key="32"
                              >
                                33
                              </option>
                              <option
                                key="33"
                              >
                                34
                              </option>
                              <option
                                key="34"
                              >
                                35
                              </option>
                              <option
                                key="35"
                              >
                                36
                              </option>
                              <option
                                key="36"
                              >
                                37
                              </option>
                              <option
                                key="37"
                              >
                                38
                              </option>
                              <option
                                key="38"
                              >
                                39
                              </option>
                              <option
                                key="39"
                              >
                                40
                              </option>
                              <option
                                key="40"
                              >
                                41
                              </option>
                              <option
                                key="41"
                              >
                                42
                              </option>
                              <option
                                key="42"
                              >
                                43
                              </option>
                              <option
                                key="43"
                              >
                                44
                              </option>
                              <option
                                key="44"
                              >
                                45
                              </option>
                              <option
                                key="45"
                              >
                                46
                              </option>
                              <option
                                key="46"
                              >
                                47
                              </option>
                              <option
                                key="47"
                              >
                                48
                              </option>
                              <option
                                key="48"
                              >
                                49
                              </option>
                              <option
                                key="49"
                              >
                                50
                              </option>
                            </select>
                            <span
                              className="pageNum reverse"
                            >
                               of 
                              50
                               Results
                            </span>
                          </ul>
                        </li>
                        <li>
                          <button
                            className="enabled"
                            id="next"
                            onClick={[Function]}
                          >
                            Next
                          </button>
                        </li>
                      </ul>
                    </div>
                  </nav>
                </Pagination>
              </QueryAnalyticsPerDailyPagination>
            </div>
          </div>
        </AverageMeetingList>
      </AnalyticsOverview>
    </div>
  </AnalyticsActivity>
</ApolloProvider>
`;
