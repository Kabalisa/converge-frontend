default: &defaults
  docker:
  - image: circleci/node:8.9
  working_directory: ~/repo

gcloud_auth: &gcloud_auth
  run:
    name: setup gcloud
    command: |
      bash ~/repo/.circleci/bin/setup_gcloud.sh

version: 2
jobs:
  test:
    <<: *defaults
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # Fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Installing Packages
          command: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: CodeClimate test reported Setup
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Running Linter
          command: yarn lint
      - run:
          name: Code Climate Pretest
          command: ./cc-test-reporter before-build
      - run:
         name: Running Tests with Coverage
         command: yarn test:coveralls
      - run:
         name: Reporting Coverage to CodeClimate
         command: ./cc-test-reporter after-build --exit-code $EXIT_CODE

      - run:
          name: Notifying slack channel (succeeded)
          when: on_success
          command: |
            bash ~/repo/.circleci/bin/notify_slack.sh success
      - run:
          name: Notifying slack channel (failed)
          when: on_fail
          command: |
            bash ~/repo/.circleci/bin/notify_slack.sh fail

  build:
    <<: *defaults
    steps:
      - checkout
      - *gcloud_auth
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Installing Packages
          command: yarn install
      - run:
          name: Load Environment Variables
          command: |
            bash ~/repo/.circleci/bin/load_env_variables.sh
      - run:
          name: Build Application
          command: yarn build
      - run:
          name: Build Docker Image
          command: |
            bash ~/repo/.circleci/bin/build_docker_image.sh
      - run:
          name: Notifying slack channel (succeeded)
          when: on_success
          command: |
            bash ~/repo/.circleci/bin/notify_slack.sh success
      - run:
          name: Notifying slack channel (failed)
          when: on_fail
          command: |
            bash ~/repo/.circleci/bin/notify_slack.sh fail

  deploy-job:
    docker:
      - image: ${CIRCLECI_IMAGE}
        auth:
          username: _json_key
          password: ${GOOGLE_CREDS}
        environment:
          GOOGLE_APPLICATION_CREDENTIALS: ${HOME}/google-service-key.json
    steps:
      - checkout
      - run:
          name: setup gcloud
          command: |
            if [ "$CIRCLE_BRANCH" == master ] || [ "$CIRCLE_BRANCH" == develop ]; then
              touch google-service-key.json
              echo $GOOGLE_CREDENTIALS_STAGING | base64 --decode >> google-service-key.json
              gcloud auth activate-service-account --key-file google-service-key.json
              gcloud --quiet config set project ${GOOGLE_PROJECT_ID_STAGING}
              gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            else
              touch google-service-key.json
              echo $GOOGLE_CREDENTIALS_SANDBOX | base64 --decode >> google-service-key.json
              gcloud auth activate-service-account --key-file google-service-key.json
              gcloud --quiet config set project ${GOOGLE_PROJECT_ID_SANDBOX}
              gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            fi
      - run:
          name: Deploy to kubernetes
          command: |
            . .circleci/bin/deploy_to_k8s.sh
      - run:
          name: Notifying slack channel (succeeded)
          when: on_success
          command: |
            bash .circleci/bin/notify_slack.sh success
      - run:
          name: Notifying slack channel (failed)
          when: on_fail
          command: |
            bash .circleci/bin/notify_slack.sh fail



workflows:
  version: 2
  build-then-deploy:
    jobs:
      - test:
          type: approval
      - build:
          requires:
            - test
          filters:
            branches:
              only:
                - master
                - develop
                - v2
      - deploy-job:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - develop
                - v2


